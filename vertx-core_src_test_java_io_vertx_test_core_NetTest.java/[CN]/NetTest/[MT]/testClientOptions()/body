{
  NetClientOptions options=new NetClientOptions();
  assertEquals(-1,options.getSendBufferSize());
  int rand=TestUtils.randomPositiveInt();
  assertEquals(options,options.setSendBufferSize(rand));
  assertEquals(rand,options.getSendBufferSize());
  try {
    options.setSendBufferSize(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setSendBufferSize(-123);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals(-1,options.getReceiveBufferSize());
  rand=TestUtils.randomPositiveInt();
  assertEquals(options,options.setReceiveBufferSize(rand));
  assertEquals(rand,options.getReceiveBufferSize());
  try {
    options.setReceiveBufferSize(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setReceiveBufferSize(-123);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertTrue(options.isReuseAddress());
  assertEquals(options,options.setReuseAddress(false));
  assertFalse(options.isReuseAddress());
  assertEquals(-1,options.getTrafficClass());
  rand=23;
  assertEquals(options,options.setTrafficClass(rand));
  assertEquals(rand,options.getTrafficClass());
  try {
    options.setTrafficClass(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setTrafficClass(256);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertTrue(options.isTcpNoDelay());
  assertEquals(options,options.setTcpNoDelay(false));
  assertFalse(options.isTcpNoDelay());
  boolean tcpKeepAlive=SocketDefaults.instance.isTcpKeepAlive();
  assertEquals(tcpKeepAlive,options.isTcpKeepAlive());
  assertEquals(options,options.setTcpKeepAlive(!tcpKeepAlive));
  assertEquals(!tcpKeepAlive,options.isTcpKeepAlive());
  int soLinger=SocketDefaults.instance.getSoLinger();
  assertEquals(soLinger,options.getSoLinger());
  rand=TestUtils.randomPositiveInt();
  assertEquals(options,options.setSoLinger(rand));
  assertEquals(rand,options.getSoLinger());
  try {
    options.setSoLinger(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertFalse(options.isUsePooledBuffers());
  assertEquals(options,options.setUsePooledBuffers(true));
  assertTrue(options.isUsePooledBuffers());
  assertFalse(options.isSsl());
  assertEquals(options,options.setSsl(true));
  assertTrue(options.isSsl());
  assertNull(options.getKeyStore());
  JKSOptions keyStoreOptions=new JKSOptions().setPath(TestUtils.randomAlphaString(100)).setPassword(TestUtils.randomAlphaString(100));
  assertEquals(options,options.setKeyStore(keyStoreOptions));
  assertEquals(keyStoreOptions,options.getKeyStore());
  assertNull(options.getTrustStore());
  JKSOptions trustStoreOptions=new JKSOptions().setPath(TestUtils.randomAlphaString(100)).setPassword(TestUtils.randomAlphaString(100));
  assertEquals(options,options.setTrustStore(trustStoreOptions));
  assertEquals(trustStoreOptions,options.getTrustStore());
  assertFalse(options.isTrustAll());
  assertEquals(options,options.setTrustAll(true));
  assertTrue(options.isTrustAll());
  assertEquals(0,options.getReconnectAttempts());
  rand=TestUtils.randomPositiveInt();
  assertEquals(options,options.setReconnectAttempts(rand));
  assertEquals(rand,options.getReconnectAttempts());
  assertEquals(1000,options.getReconnectInterval());
  rand=TestUtils.randomPositiveInt();
  assertEquals(options,options.setReconnectInterval(rand));
  assertEquals(rand,options.getReconnectInterval());
  assertTrue(options.getEnabledCipherSuites().isEmpty());
  assertEquals(options,options.addEnabledCipherSuite("foo"));
  assertEquals(options,options.addEnabledCipherSuite("bar"));
  assertNotNull(options.getEnabledCipherSuites());
  assertTrue(options.getEnabledCipherSuites().contains("foo"));
  assertTrue(options.getEnabledCipherSuites().contains("bar"));
  testComplete();
}
