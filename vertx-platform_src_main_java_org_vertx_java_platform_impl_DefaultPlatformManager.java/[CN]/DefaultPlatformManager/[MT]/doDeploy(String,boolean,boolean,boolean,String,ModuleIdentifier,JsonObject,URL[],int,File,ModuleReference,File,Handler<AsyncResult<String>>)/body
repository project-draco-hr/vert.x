{
  checkWorkerContext();
  if (dHandler == null) {
    dHandler=new Handler<AsyncResult<String>>(){
      @Override public void handle(      AsyncResult<String> ar){
        if (ar.failed()) {
          log.error("Failed to deploy",ar.cause());
        }
      }
    }
;
  }
  final Handler<AsyncResult<String>> doneHandler=dHandler;
  final String deploymentID=depID != null ? depID : genDepName();
  log.debug("Deploying name : " + deploymentID + " main: "+ theMain+ " instances: "+ instances);
  LanguageImplInfo langImplInfo=null;
  final String main;
  int prefixMarker=theMain.indexOf(COLON);
  if (prefixMarker != -1) {
    String prefix=theMain.substring(0,prefixMarker);
    langImplInfo=languageImpls.get(prefix);
    if (langImplInfo == null) {
      throw new IllegalStateException("No language implementation known for prefix " + prefix);
    }
    main=theMain.substring(prefixMarker + 1);
  }
 else {
    main=theMain;
  }
  if (langImplInfo == null) {
    int extensionMarker=main.lastIndexOf('.');
    if (extensionMarker != -1) {
      String extension=main.substring(extensionMarker + 1);
      String langImplName=extensionMappings.get(extension);
      if (langImplName != null) {
        langImplInfo=languageImpls.get(langImplName);
        if (langImplInfo == null) {
          throw new IllegalStateException("Extension mapping for " + extension + " specified as "+ langImplName+ ", but no language implementation known for that name");
        }
      }
    }
  }
  if (langImplInfo == null) {
    langImplInfo=languageImpls.get(defaultLanguageImplName);
    if (langImplInfo == null) {
      throw new IllegalStateException("Default language implementation is " + defaultLanguageImplName + " but no language implementation known for that name");
    }
  }
  if (langImplInfo.moduleName != null) {
    loadIncludedModules(modRoot,modDir,mr,langImplInfo.moduleName);
  }
  String parentDeploymentName=getDeploymentName();
  if (parentDeploymentName != null) {
    Deployment parentDeployment=deployments.get(parentDeploymentName);
    if (parentDeployment == null) {
      throw new PlatformManagerException("Parent has already been undeployed!");
    }
    parentDeployment.childDeployments.add(deploymentID);
  }
  final VerticleFactory verticleFactory;
  try {
    verticleFactory=mr.getVerticleFactory(langImplInfo.factoryName,vertx,new DefaultContainer(this));
  }
 catch (  Throwable t) {
    throw new PlatformManagerException("Failed to instantiate verticle factory",t);
  }
  final CountingCompletionHandler<Void> aggHandler=new CountingCompletionHandler<>(vertx,instances);
  aggHandler.setHandler(new Handler<AsyncResult<Void>>(){
    @Override public void handle(    AsyncResult<Void> res){
      if (res.failed()) {
        doneHandler.handle(new DefaultFutureResult<String>(res.cause()));
      }
 else {
        doneHandler.handle(new DefaultFutureResult<>(deploymentID));
      }
    }
  }
);
  final Deployment deployment=new Deployment(deploymentID,main,modID,instances,config == null ? new JsonObject() : config.copy(),urls,modDir,parentDeploymentName,mr,autoRedeploy);
  mr.incRef();
  deployments.put(deploymentID,deployment);
  ClassLoader oldTCCL=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(mr.mcl);
  try {
    for (int i=0; i < instances; i++) {
      Runnable runner=new Runnable(){
        public void run(){
          Verticle verticle;
          try {
            verticle=verticleFactory.createVerticle(main);
          }
 catch (          Throwable t) {
            handleDeployFailure(t,deploymentID,aggHandler);
            return;
          }
          try {
            addVerticle(deployment,verticle,verticleFactory,modID,main);
            setPathResolver(modID,modDir);
            DefaultFutureResult<Void> vr=new DefaultFutureResult<>();
            verticle.start(vr);
            vr.setHandler(new Handler<AsyncResult<Void>>(){
              @Override public void handle(              AsyncResult<Void> ar){
                if (ar.succeeded()) {
                  aggHandler.complete();
                }
 else {
                  handleDeployFailure(ar.cause(),deploymentID,aggHandler);
                }
              }
            }
);
          }
 catch (          Throwable t) {
            handleDeployFailure(t,deploymentID,aggHandler);
          }
        }
      }
;
      if (worker) {
        vertx.startInBackground(runner,multiThreaded);
      }
 else {
        vertx.startOnEventLoop(runner);
      }
    }
  }
  finally {
    Thread.currentThread().setContextClassLoader(oldTCCL);
  }
}
