{
  try (InputStream is=getClass().getClassLoader().getResourceAsStream(REPOS_FILE_NAME)){
    if (is != null) {
      BufferedReader rdr=new BufferedReader(new InputStreamReader(is));
      String line;
      while ((line=rdr.readLine()) != null) {
        line=line.trim();
        if (line.isEmpty() || line.startsWith("#")) {
          continue;
        }
        int colonPos=line.indexOf(':');
        if (colonPos == -1 || colonPos == line.length() - 1) {
          throw new IllegalArgumentException("Invalid repo: " + line);
        }
        String type=line.substring(0,colonPos);
        String repoID=line.substring(colonPos + 1);
        RepoResolver resolver;
switch (type) {
case "mavenLocal":
          if (disableMavenLocal) {
            continue;
          }
        resolver=new MavenLocalRepoResolver(repoID);
      break;
case "maven":
    resolver=new MavenRepoResolver(vertx,repoID);
  break;
case "bintray":
resolver=new BintrayRepoResolver(vertx,repoID);
break;
case "old":
resolver=new OldRepoResolver(vertx,repoID);
break;
default :
throw new IllegalArgumentException("Unknown repo type: " + type);
}
repos.add(resolver);
}
}
}
 catch (IOException e) {
log.error("Failed to load " + LANG_PROPS_FILE_NAME + " "+ e.getMessage());
}
}
