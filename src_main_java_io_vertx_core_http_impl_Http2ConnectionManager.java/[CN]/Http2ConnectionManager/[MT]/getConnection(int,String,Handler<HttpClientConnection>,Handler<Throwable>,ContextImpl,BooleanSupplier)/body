{
  ContextInternal context;
  if (clientContext == null) {
    context=client.getVertx().getOrCreateContext();
  }
 else {
    context=clientContext;
  }
  Bootstrap bootstrap=new Bootstrap();
  bootstrap.group(context.nettyEventLoop());
  bootstrap.channelFactory(new VertxNioSocketChannelFactory());
  SSLHelper sslHelper=client.getSslHelper();
  sslHelper.validate(client.getVertx());
  bootstrap.handler(new ChannelInitializer<Channel>(){
    @Override protected void initChannel(    Channel ch) throws Exception {
      SslHandler sslHandler=sslHelper.createSslHandler(client.getVertx(),true,host,port);
      ch.pipeline().addLast(sslHandler);
      ch.pipeline().addLast(new ApplicationProtocolNegotiationHandler("alpn"){
        @Override protected void configurePipeline(        ChannelHandlerContext ctx,        String protocol){
          if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {
            ChannelPipeline p=ctx.pipeline();
            Http2Connection connection=new DefaultHttp2Connection(false);
            VertxClientHandlerBuilder clientHandlerBuilder=new VertxClientHandlerBuilder();
            VertxClientHandler clientHandler=clientHandlerBuilder.build(connection);
            p.addLast(clientHandler);
            Http2ClientConnection conn=new Http2ClientConnection();
            handler.handle(conn);
            return;
          }
          ctx.close();
          connectionExceptionHandler.handle(new IllegalStateException("unknown protocol: " + protocol));
        }
      }
);
    }
  }
);
  applyConnectionOptions(client.getOptions(),bootstrap);
  bootstrap.connect(new InetSocketAddress(host,port));
}
