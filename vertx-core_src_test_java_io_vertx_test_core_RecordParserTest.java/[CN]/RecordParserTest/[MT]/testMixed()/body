{
  final int lines=8;
  final List<Object> types=new ArrayList<Object>();
class MyHandler implements Handler<Buffer> {
    RecordParser parser=RecordParser.newFixed(10,this);
    int pos;
    public void handle(    Buffer buff){
      if (pos < lines) {
        Object type=types.get(pos);
        if (type instanceof byte[]) {
          byte[] bytes=(byte[])type;
          parser.delimitedMode(bytes);
        }
 else {
          int length=(Integer)type;
          parser.fixedSizeMode(length);
        }
      }
    }
  }
  MyHandler out=new MyHandler();
  Buffer[] expected=new Buffer[lines];
  Buffer input=Buffer.buffer(100);
  expected[0]=TestUtils.randomBuffer(10);
  input.appendBuffer(expected[0]);
  types.add(expected[0].length());
  expected[1]=TestUtils.randomBuffer(100);
  input.appendBuffer(expected[1]);
  types.add(expected[1].length());
  byte[] delim=new byte[]{23,-120,100,3};
  expected[2]=TestUtils.randomBuffer(50,true,delim[0]);
  input.appendBuffer(expected[2]);
  types.add(delim);
  input.appendBuffer(Buffer.buffer(delim));
  expected[3]=TestUtils.randomBuffer(1000);
  input.appendBuffer(expected[3]);
  types.add(expected[3].length());
  expected[4]=TestUtils.randomBuffer(230,true,delim[0]);
  input.appendBuffer(expected[4]);
  types.add(delim);
  input.appendBuffer(Buffer.buffer(delim));
  delim=new byte[]{17};
  expected[5]=TestUtils.randomBuffer(341,true,delim[0]);
  input.appendBuffer(expected[5]);
  types.add(delim);
  input.appendBuffer(Buffer.buffer(delim));
  delim=new byte[]{54,-32,0};
  expected[6]=TestUtils.randomBuffer(1234,true,delim[0]);
  input.appendBuffer(expected[6]);
  types.add(delim);
  input.appendBuffer(Buffer.buffer(delim));
  expected[7]=TestUtils.randomBuffer(100);
  input.appendBuffer(expected[7]);
  types.add(expected[7].length());
  feedChunks(input,out.parser,new Integer[]{50,10,3});
}
