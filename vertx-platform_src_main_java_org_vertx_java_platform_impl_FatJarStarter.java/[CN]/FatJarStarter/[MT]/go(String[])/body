{
  URLClassLoader urlc=(URLClassLoader)FatJarStarter.class.getClassLoader();
  String fileName=urlc.getURLs()[0].getFile();
  vertxHome=unzipIntoTmpDir(fileName);
  File modsDir=new File(vertxHome,"mods");
  File manifest=new File(new File(vertxHome,"META-INF"),"MANIFEST.MF");
  String moduleID=null;
  try (Scanner scanner=new Scanner(manifest)){
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.startsWith("Vertx-Module-ID")) {
        moduleID=line.substring(line.lastIndexOf(':') + 1).trim();
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException("Failed to read module id from manifest",e);
  }
  if (moduleID == null) {
    throw new NullPointerException("moduleID");
  }
  File libDir=new File(vertxHome,"lib");
  File[] files=libDir.listFiles();
  List<URL> urls=new ArrayList<>();
  for (  File file : files) {
    if (file.getName().endsWith(".jar") || file.getName().endsWith(".zip")) {
      urls.add(file.toURI().toURL());
    }
  }
  platformLoader=new URLClassLoader(urls.toArray(new URL[urls.size()]),urlc.getParent());
  Thread.currentThread().setContextClassLoader(platformLoader);
  Class<?> starterClass=platformLoader.loadClass("org.vertx.java.platform.impl.cli.Starter");
  List<String> largs=new ArrayList<>();
  largs.add("runmod");
  largs.add(moduleID);
  boolean ignoring=false;
  for (  String arg : args) {
    if (arg.equals("-cp")) {
      ignoring=true;
    }
 else     if (!ignoring) {
      largs.add(arg);
    }
 else {
      ignoring=false;
    }
  }
  System.setProperty("vertx.home",vertxHome.getAbsolutePath());
  System.setProperty("vertx.mods",modsDir.getAbsolutePath());
  System.setProperty("vertx.clusterManagerFactory","org.vertx.java.spi.cluster.impl.hazelcast.HazelcastClusterManagerFactory");
  Method afterShutdownMeth=starterClass.getMethod("addAfterShutdownTask",new Class[]{Runnable.class});
  afterShutdownMeth.invoke(null,this);
  Method meth=starterClass.getMethod("main",new Class[]{String[].class});
  String[] theargs=largs.toArray(new String[largs.size()]);
  meth.invoke(null,(Object)theargs);
}
