{
  Objects.requireNonNull(path);
  Set<PosixFilePermission> permissions=PosixFilePermissions.fromString(perms);
  Set<PosixFilePermission> dirPermissions=dirPerms == null ? null : PosixFilePermissions.fromString(dirPerms);
  return new BlockingAction<Void>(handler){
    public Void perform(){
      try {
        Path target=vertx.resolveFile(path).toPath();
        if (dirPermissions != null) {
          Files.walkFileTree(target,new SimpleFileVisitor<Path>(){
            public FileVisitResult preVisitDirectory(            Path dir,            BasicFileAttributes attrs) throws IOException {
              Files.setPosixFilePermissions(dir,dirPermissions);
              return FileVisitResult.CONTINUE;
            }
            public FileVisitResult visitFile(            Path file,            BasicFileAttributes attrs) throws IOException {
              Files.setPosixFilePermissions(file,permissions);
              return FileVisitResult.CONTINUE;
            }
          }
);
        }
 else {
          Files.setPosixFilePermissions(target,permissions);
        }
      }
 catch (      SecurityException e) {
        throw new FileSystemException("Accessed denied for chmod on " + path);
      }
catch (      IOException e) {
        throw new FileSystemException(e);
      }
      return null;
    }
  }
;
}
