{
  if (msg instanceof HttpContent) {
    HttpContent content=(HttpContent)msg;
    ByteBuf buf=content.content();
    if (buf != Unpooled.EMPTY_BUFFER && buf.isDirect()) {
      ByteBuf newBuf=safeBuffer(content,allocator);
      if (msg instanceof LastHttpContent) {
        LastHttpContent last=(LastHttpContent)msg;
        return new AssembledLastHttpContent(newBuf,last.trailingHeaders());
      }
 else {
        return new DefaultHttpContent(newBuf);
      }
    }
  }
 else   if (msg instanceof WebSocketFrame) {
    ByteBuf payload=safeBuffer((WebSocketFrame)msg,allocator);
    boolean isFinal=((WebSocketFrame)msg).isFinalFragment();
    io.vertx.core.http.WebSocketFrame.FrameType frameType;
    if (msg instanceof BinaryWebSocketFrame) {
      frameType=io.vertx.core.http.WebSocketFrame.FrameType.BINARY;
    }
 else     if (msg instanceof CloseWebSocketFrame) {
      frameType=io.vertx.core.http.WebSocketFrame.FrameType.CLOSE;
    }
 else     if (msg instanceof PingWebSocketFrame) {
      frameType=io.vertx.core.http.WebSocketFrame.FrameType.PING;
    }
 else     if (msg instanceof PongWebSocketFrame) {
      frameType=io.vertx.core.http.WebSocketFrame.FrameType.PONG;
    }
 else     if (msg instanceof TextWebSocketFrame) {
      frameType=io.vertx.core.http.WebSocketFrame.FrameType.TEXT;
    }
 else     if (msg instanceof ContinuationWebSocketFrame) {
      frameType=io.vertx.core.http.WebSocketFrame.FrameType.CONTINUATION;
    }
 else {
      throw new IllegalStateException("Unsupported websocket msg " + msg);
    }
    return new WebSocketFrameImpl(frameType,payload,isFinal);
  }
  return msg;
}
