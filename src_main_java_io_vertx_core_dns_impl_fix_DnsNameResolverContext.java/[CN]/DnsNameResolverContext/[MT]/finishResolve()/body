{
  if (!queriesInProgress.isEmpty()) {
    for (Iterator<Future<AddressedEnvelope<DnsResponse,InetSocketAddress>>> i=queriesInProgress.iterator(); i.hasNext(); ) {
      Future<AddressedEnvelope<DnsResponse,InetSocketAddress>> f=i.next();
      i.remove();
      if (!f.cancel(false)) {
        f.addListener(RELEASE_RESPONSE);
      }
    }
  }
  if (resolvedEntries != null) {
    for (    InternetProtocolFamily f : resolveAddressTypes) {
      if (finishResolve(f.addressType(),resolvedEntries)) {
        return;
      }
    }
  }
  final int tries=maxAllowedQueries - allowedQueries;
  final StringBuilder buf=new StringBuilder(64);
  buf.append("failed to resolve '").append(hostname).append('\'');
  if (tries > 1) {
    if (tries < maxAllowedQueries) {
      buf.append(" after ").append(tries).append(" queries ");
    }
 else {
      buf.append(". Exceeded max queries per resolve ").append(maxAllowedQueries).append(' ');
    }
  }
  if (trace != null) {
    buf.append(':').append(trace);
  }
  final UnknownHostException cause=new UnknownHostException(buf.toString());
  resolveCache.cache(hostname,cause,parent.ch.eventLoop());
  promise.tryFailure(cause);
}
