{
  return new Handler<HttpServerRequest>(){
class TimeoutInfo {
      final long timeout;
      final Buffer buff;
      TimeoutInfo(      long timeout,      Buffer buff){
        this.timeout=timeout;
        this.buff=buff;
      }
    }
    private void setTimeout(    List<TimeoutInfo> timeouts,    long delay,    final Buffer buff){
      timeouts.add(new TimeoutInfo(delay,buff));
    }
    private void runTimeouts(    List<TimeoutInfo> timeouts,    HttpServerResponse response){
      final Iterator<TimeoutInfo> iter=timeouts.iterator();
      nextTimeout(timeouts,iter,response);
    }
    private void nextTimeout(    final List<TimeoutInfo> timeouts,    final Iterator<TimeoutInfo> iter,    final HttpServerResponse response){
      if (iter.hasNext()) {
        final TimeoutInfo timeout=iter.next();
        vertx.setTimer(timeout.timeout,new Handler<Long>(){
          public void handle(          Long id){
            response.writeBuffer(timeout.buff);
            nextTimeout(timeouts,iter,response);
          }
        }
);
      }
 else {
        timeouts.clear();
      }
    }
    public void handle(    HttpServerRequest req){
      req.response().headers().set("Content-Type","application/javascript; charset=UTF-8");
      BaseTransport.setCORS(req);
      req.response().setChunked(true);
      Buffer h=Buffer.newBuffer(2);
      h.appendString("h\n");
      Buffer hs=Buffer.newBuffer(2050);
      for (int i=0; i < 2048; i++) {
        hs.appendByte((byte)' ');
      }
      hs.appendString("h\n");
      List<TimeoutInfo> timeouts=new ArrayList<>();
      setTimeout(timeouts,0,h);
      setTimeout(timeouts,1,hs);
      setTimeout(timeouts,5,h);
      setTimeout(timeouts,25,h);
      setTimeout(timeouts,125,h);
      setTimeout(timeouts,625,h);
      setTimeout(timeouts,3125,h);
      runTimeouts(timeouts,req.response());
    }
  }
;
}
