{
  Object object=new Object(){
    @Option(longName="list",shortName="l") public void setFoo(    List<String> list){
    }
    @Option(longName="set",shortName="s") public void setFoo(    Set<Character> set){
    }
    @Option(longName="collection",shortName="c") public void setFoo(    Collection<Integer> collection){
    }
    @Option(longName="tree",shortName="t") public void setFoo(    TreeSet<String> list){
    }
    @Option(longName="al",shortName="al") public void setFoo(    ArrayList<String> list){
    }
    @Option(longName="array",shortName="a") public void setFoo(    int[] list){
    }
  }
;
  CLI command=CLIConfigurator.define(object.getClass());
  assertThat(command.getOptions()).hasSize(6);
  TypedOption model=(TypedOption)find(command.getOptions(),"list");
  assertThat(model.getType()).isEqualTo(String.class);
  assertThat(model.isMultiValued()).isTrue();
  model=(TypedOption)find(command.getOptions(),"set");
  assertThat(model.getType()).isEqualTo(Character.class);
  assertThat(model.isMultiValued()).isTrue();
  model=(TypedOption)find(command.getOptions(),"collection");
  assertThat(model.getType()).isEqualTo(Integer.class);
  assertThat(model.isMultiValued()).isTrue();
  model=(TypedOption)find(command.getOptions(),"tree");
  assertThat(model.getType()).isEqualTo(String.class);
  assertThat(model.isMultiValued()).isTrue();
  model=(TypedOption)find(command.getOptions(),"al");
  assertThat(model.getType()).isEqualTo(String.class);
  assertThat(model.isMultiValued()).isTrue();
  model=(TypedOption)find(command.getOptions(),"array");
  assertThat(model.getType()).isEqualTo(Integer.TYPE);
  assertThat(model.isMultiValued()).isTrue();
}
