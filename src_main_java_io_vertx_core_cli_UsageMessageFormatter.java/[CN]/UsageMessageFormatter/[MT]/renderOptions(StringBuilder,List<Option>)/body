{
  final String lpad=createPadding(leftPad);
  final String dpad=createPadding(descPad);
  int max=0;
  List<StringBuilder> prefixList=new ArrayList<>();
  if (getOptionComparator() != null) {
    Collections.sort(options,getOptionComparator());
  }
  for (  Option option : options) {
    if (option.isHidden()) {
      continue;
    }
    StringBuilder optBuf=new StringBuilder();
    if (isNullOrEmpty(option.getShortName())) {
      optBuf.append(lpad).append("   ").append(getLongOptionPrefix()).append(option.getLongName());
    }
 else {
      optBuf.append(lpad).append(getOptionPrefix()).append(option.getShortName());
      if (!isNullOrEmpty(option.getLongName())) {
        optBuf.append(',').append(getLongOptionPrefix()).append(option.getLongName());
      }
    }
    if (option.acceptValue()) {
      String argName=option.getArgName();
      if (argName != null && argName.length() == 0) {
        optBuf.append(' ');
      }
 else {
        optBuf.append(!isNullOrEmpty(option.getLongName()) ? longOptSeparator : " ");
        optBuf.append("<").append(argName != null ? option.getArgName() : getArgName()).append(">");
      }
    }
    prefixList.add(optBuf);
    max=optBuf.length() > max ? optBuf.length() : max;
  }
  int x=0;
  for (Iterator<Option> it=options.iterator(); it.hasNext(); ) {
    Option option=it.next();
    if (option.isHidden()) {
      continue;
    }
    StringBuilder optBuf=new StringBuilder(prefixList.get(x++).toString());
    if (optBuf.length() < max) {
      optBuf.append(createPadding(max - optBuf.length()));
    }
    optBuf.append(dpad);
    int nextLineTabStop=max + descPad;
    if (option.getDescription() != null) {
      optBuf.append(option.getDescription());
    }
    renderWrappedText(sb,width,nextLineTabStop,optBuf.toString());
    if (it.hasNext()) {
      sb.append(getNewLine());
    }
  }
  return sb;
}
