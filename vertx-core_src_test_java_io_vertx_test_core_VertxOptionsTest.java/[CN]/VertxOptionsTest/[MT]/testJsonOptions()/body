{
  VertxOptions options=new VertxOptions(new JsonObject());
  assertEquals(0,options.getClusterPort());
  assertEquals(2 * Runtime.getRuntime().availableProcessors(),options.getEventLoopPoolSize());
  assertEquals(20,options.getInternalBlockingPoolSize());
  assertEquals(20,options.getWorkerPoolSize());
  assertEquals(1000,options.getBlockedThreadCheckPeriod());
  assertEquals("localhost",options.getClusterHost());
  assertEquals(null,options.getClusterManager());
  assertEquals(2000l * 1000000,options.getMaxEventLoopExecuteTime());
  assertEquals(1l * 60 * 1000* 1000000,options.getMaxWorkerExecuteTime());
  assertEquals(10 * 1000,options.getProxyOperationTimeout());
  assertFalse(options.isHAEnabled());
  assertEquals(1,options.getQuorumSize());
  assertNull(options.getHAGroup());
  assertFalse(options.isMetricsEnabled());
  assertFalse(options.isJmxEnabled());
  assertNull(options.getJmxDomain());
  int clusterPort=TestUtils.randomPortInt();
  int eventLoopPoolSize=TestUtils.randomPositiveInt();
  int internalBlockingPoolSize=TestUtils.randomPositiveInt();
  int workerPoolSize=TestUtils.randomPositiveInt();
  int blockedThreadCheckPeriod=TestUtils.randomPositiveInt();
  String clusterHost=TestUtils.randomAlphaString(100);
  int maxEventLoopExecuteTime=TestUtils.randomPositiveInt();
  int maxWorkerExecuteTime=TestUtils.randomPositiveInt();
  int proxyOperationTimeout=TestUtils.randomPositiveInt();
  Random rand=new Random();
  boolean haEnabled=rand.nextBoolean();
  int quorumSize=TestUtils.randomShort() + 1;
  String haGroup=TestUtils.randomAlphaString(100);
  boolean metricsEnabled=rand.nextBoolean();
  boolean jmxEnabled=rand.nextBoolean();
  String jmxDomain=TestUtils.randomAlphaString(100);
  options=new VertxOptions(new JsonObject().putNumber("clusterPort",clusterPort).putNumber("eventLoopPoolSize",eventLoopPoolSize).putNumber("internalBlockingPoolSize",internalBlockingPoolSize).putNumber("workerPoolSize",workerPoolSize).putNumber("blockedThreadCheckPeriod",blockedThreadCheckPeriod).putString("clusterHost",clusterHost).putNumber("maxEventLoopExecuteTime",maxEventLoopExecuteTime).putNumber("maxWorkerExecuteTime",maxWorkerExecuteTime).putNumber("proxyOperationTimeout",proxyOperationTimeout).putBoolean("haEnabled",haEnabled).putNumber("quorumSize",quorumSize).putString("haGroup",haGroup).putBoolean("metricsEnabled",metricsEnabled).putBoolean("jmxEnabled",jmxEnabled).putString("jmxDomain",jmxDomain));
  assertEquals(clusterPort,options.getClusterPort());
  assertEquals(eventLoopPoolSize,options.getEventLoopPoolSize());
  assertEquals(internalBlockingPoolSize,options.getInternalBlockingPoolSize());
  assertEquals(workerPoolSize,options.getWorkerPoolSize());
  assertEquals(blockedThreadCheckPeriod,options.getBlockedThreadCheckPeriod());
  assertEquals(clusterHost,options.getClusterHost());
  assertEquals(null,options.getClusterManager());
  assertEquals(maxEventLoopExecuteTime,options.getMaxEventLoopExecuteTime());
  assertEquals(maxWorkerExecuteTime,options.getMaxWorkerExecuteTime());
  assertEquals(proxyOperationTimeout,options.getProxyOperationTimeout());
  assertEquals(haEnabled,options.isHAEnabled());
  assertEquals(quorumSize,options.getQuorumSize());
  assertEquals(haGroup,options.getHAGroup());
  assertEquals(metricsEnabled,options.isMetricsEnabled());
  assertEquals(jmxEnabled,options.isJmxEnabled());
  assertEquals(jmxDomain,options.getJmxDomain());
}
