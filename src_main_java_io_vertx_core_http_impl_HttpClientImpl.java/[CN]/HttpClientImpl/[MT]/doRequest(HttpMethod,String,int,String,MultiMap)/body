{
  Objects.requireNonNull(method,"no null method accepted");
  Objects.requireNonNull(host,"no null host accepted");
  Objects.requireNonNull(relativeURI,"no null relativeURI accepted");
  checkClosed();
  String connectHost;
  int connectPort;
  ProxyOptions proxyOptions=options.getProxyOptions();
  final boolean useProxy=!options.isSsl() && proxyOptions != null && proxyOptions.getType() == ProxyType.HTTP;
  if (useProxy) {
    relativeURI="http://" + host + (port != 80 ? ":" + port : "")+ relativeURI;
    connectHost=proxyOptions.getHost();
    connectPort=proxyOptions.getPort();
    if (proxyOptions.getUsername() != null && proxyOptions.getPassword() != null) {
      if (headers == null) {
        headers=MultiMap.caseInsensitiveMultiMap();
      }
      headers.add("Proxy-Authorization","Basic " + Base64.getEncoder().encodeToString((proxyOptions.getUsername() + ":" + proxyOptions.getPassword()).getBytes()));
    }
  }
 else {
    connectHost=host;
    connectPort=port;
  }
  HttpClientRequest req=new HttpClientRequestImpl(this,method,connectHost,connectPort,options.isSsl(),relativeURI,vertx);
  if (useProxy) {
    req.setHost(host + (port != 80 ? ":" + port : ""));
  }
  if (headers != null) {
    req.headers().setAll(headers);
  }
  return req;
}
