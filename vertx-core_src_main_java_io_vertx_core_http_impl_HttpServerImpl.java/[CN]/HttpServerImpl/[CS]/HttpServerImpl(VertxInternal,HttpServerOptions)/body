{
  this.options=new HttpServerOptions(options);
  this.vertx=vertx;
  this.creatingContext=vertx.getContext();
  if (creatingContext != null) {
    if (creatingContext.isMultiThreaded()) {
      throw new IllegalStateException("Cannot use HttpServer in a multi-threaded worker verticle");
    }
    creatingContext.addCloseHook(this);
  }
  this.sslHelper=new SSLHelper(options,KeyStoreHelper.create(vertx,options.getKeyStoreOptions()),KeyStoreHelper.create(vertx,options.getTrustStoreOptions()));
  this.wsStream=new HttpStreamHandler<ServerWebSocket>(){
    @Override public ReadStream<ServerWebSocket> handler(    Handler<ServerWebSocket> handler){
      if (listening) {
        throw new IllegalStateException("Please set handler before server is listening");
      }
      this.handler=handler;
      return this;
    }
  }
;
  this.requestStream=new HttpStreamHandler<HttpServerRequest>(){
    @Override public ReadStream<HttpServerRequest> handler(    Handler<HttpServerRequest> handler){
      if (listening) {
        throw new IllegalStateException("Please set handler before server is listening");
      }
      this.handler=handler;
      return this;
    }
  }
;
  this.subProtocols=options.getWebsocketSubProtocols();
  this.metrics=vertx.metricsSPI().register(this,options);
}
