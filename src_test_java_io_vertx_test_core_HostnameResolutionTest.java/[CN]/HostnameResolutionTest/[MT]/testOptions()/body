{
  AddressResolverOptions options=new AddressResolverOptions();
  assertEquals(AddressResolverOptions.DEFAULT_OPT_RESOURCE_ENABLED,options.isOptResourceEnabled());
  assertEquals(AddressResolverOptions.DEFAULT_SERVERS,options.getServers());
  assertEquals(AddressResolverOptions.DEFAULT_CACHE_MIN_TIME_TO_LIVE,options.getCacheMinTimeToLive());
  assertEquals(AddressResolverOptions.DEFAULT_CACHE_MAX_TIME_TO_LIVE,options.getCacheMaxTimeToLive());
  assertEquals(AddressResolverOptions.DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE,options.getCacheNegativeTimeToLive());
  assertEquals(AddressResolverOptions.DEFAULT_QUERY_TIMEOUT,options.getQueryTimeout());
  assertEquals(AddressResolverOptions.DEFAULT_MAX_QUERIES,options.getMaxQueries());
  assertEquals(AddressResolverOptions.DEFAULT_RD_FLAG,options.getRdFlag());
  assertEquals(AddressResolverOptions.DEFAULT_NDOTS,options.getNdots());
  assertEquals(AddressResolverOptions.DEFAULT_SEACH_DOMAINS,options.getSearchDomains());
  boolean optResourceEnabled=TestUtils.randomBoolean();
  List<String> servers=Arrays.asList("1.2.3.4","5.6.7.8");
  int minTTL=TestUtils.randomPositiveInt();
  int maxTTL=minTTL + 1000;
  int negativeTTL=TestUtils.randomPositiveInt();
  int queryTimeout=1 + TestUtils.randomPositiveInt();
  int maxQueries=1 + TestUtils.randomPositiveInt();
  boolean rdFlag=TestUtils.randomBoolean();
  int ndots=TestUtils.randomPositiveInt();
  List<String> searchDomains=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    searchDomains.add(TestUtils.randomAlphaString(15));
  }
  assertSame(options,options.setOptResourceEnabled(optResourceEnabled));
  assertSame(options,options.setServers(new ArrayList<>(servers)));
  assertSame(options,options.setCacheMinTimeToLive(0));
  assertSame(options,options.setCacheMinTimeToLive(minTTL));
  try {
    options.setCacheMinTimeToLive(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertSame(options,options.setCacheMaxTimeToLive(0));
  assertSame(options,options.setCacheMaxTimeToLive(maxTTL));
  try {
    options.setCacheMaxTimeToLive(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertSame(options,options.setCacheNegativeTimeToLive(0));
  assertSame(options,options.setCacheNegativeTimeToLive(negativeTTL));
  try {
    options.setCacheNegativeTimeToLive(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertSame(options,options.setQueryTimeout(queryTimeout));
  try {
    options.setQueryTimeout(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertSame(options,options.setMaxQueries(maxQueries));
  try {
    options.setMaxQueries(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertSame(options,options.setRdFlag(rdFlag));
  assertSame(options,options.setSearchDomains(searchDomains));
  assertSame(options,options.setNdots(ndots));
  try {
    options.setNdots(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals(optResourceEnabled,options.isOptResourceEnabled());
  assertEquals(servers,options.getServers());
  assertEquals(minTTL,options.getCacheMinTimeToLive());
  assertEquals(maxTTL,options.getCacheMaxTimeToLive());
  assertEquals(negativeTTL,options.getCacheNegativeTimeToLive());
  assertEquals(queryTimeout,options.getQueryTimeout());
  assertEquals(maxQueries,options.getMaxQueries());
  assertEquals(rdFlag,options.getRdFlag());
  assertEquals(ndots,options.getNdots());
  assertEquals(searchDomains,options.getSearchDomains());
  AddressResolverOptions copy=new AddressResolverOptions(options);
  AddressResolverOptions jsonCopy=new AddressResolverOptions(options.toJson());
  options.setOptResourceEnabled(AddressResolverOptions.DEFAULT_OPT_RESOURCE_ENABLED);
  options.getServers().clear();
  options.setCacheMinTimeToLive(AddressResolverOptions.DEFAULT_CACHE_MIN_TIME_TO_LIVE);
  options.setCacheMaxTimeToLive(AddressResolverOptions.DEFAULT_CACHE_MAX_TIME_TO_LIVE);
  options.setCacheNegativeTimeToLive(AddressResolverOptions.DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE);
  options.setQueryTimeout(AddressResolverOptions.DEFAULT_QUERY_TIMEOUT);
  options.setMaxQueries(AddressResolverOptions.DEFAULT_MAX_QUERIES);
  options.setRdFlag(AddressResolverOptions.DEFAULT_RD_FLAG);
  options.setNdots(AddressResolverOptions.DEFAULT_NDOTS);
  options.setSearchDomains(AddressResolverOptions.DEFAULT_SEACH_DOMAINS);
  assertEquals(optResourceEnabled,copy.isOptResourceEnabled());
  assertEquals(servers,copy.getServers());
  assertEquals(minTTL,copy.getCacheMinTimeToLive());
  assertEquals(maxTTL,copy.getCacheMaxTimeToLive());
  assertEquals(negativeTTL,copy.getCacheNegativeTimeToLive());
  assertEquals(queryTimeout,copy.getQueryTimeout());
  assertEquals(maxQueries,copy.getMaxQueries());
  assertEquals(rdFlag,copy.getRdFlag());
  assertEquals(ndots,copy.getNdots());
  assertEquals(searchDomains,copy.getSearchDomains());
  assertEquals(optResourceEnabled,jsonCopy.isOptResourceEnabled());
  assertEquals(servers,jsonCopy.getServers());
  assertEquals(minTTL,jsonCopy.getCacheMinTimeToLive());
  assertEquals(maxTTL,jsonCopy.getCacheMaxTimeToLive());
  assertEquals(negativeTTL,jsonCopy.getCacheNegativeTimeToLive());
  assertEquals(queryTimeout,jsonCopy.getQueryTimeout());
  assertEquals(maxQueries,jsonCopy.getMaxQueries());
  assertEquals(rdFlag,jsonCopy.getRdFlag());
  assertEquals(ndots,jsonCopy.getNdots());
  assertEquals(searchDomains,jsonCopy.getSearchDomains());
}
