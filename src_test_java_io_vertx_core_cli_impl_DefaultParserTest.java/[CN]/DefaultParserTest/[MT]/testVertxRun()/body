{
  CLI cli=new DefaultCLI().setName("test");
  Option[] options=new Option[]{new TypedOption<String>().setLongName("conf").setType(String.class).setSingleValued(true),new TypedOption<Integer>().setLongName("instances").setType(Integer.class).setSingleValued(true).setDefaultValue("1"),new TypedOption<Boolean>().setLongName("worker").setType(Boolean.class).setFlag(true),new TypedOption<String>().setLongName("classpath").setShortName("cp").setListSeparator(File.pathSeparator).setType(String.class).setSingleValued(true),new TypedOption<Boolean>().setLongName("cluster").setType(Boolean.class).setFlag(true),new TypedOption<Integer>().setLongName("cluster-port").setType(Integer.class).setSingleValued(true),new TypedOption<String>().setLongName("cluster-host").setType(String.class).setSingleValued(true),new TypedOption<Boolean>().setLongName("ha").setType(Boolean.class).setFlag(true).setSingleValued(true),new TypedOption<Integer>().setLongName("quorum").setType(Integer.class).setSingleValued(true),new TypedOption<String>().setLongName("ha-group").setType(String.class).setDefaultValue("__DEFAULT__").setSingleValued(true)};
  cli.addOptions(Arrays.asList(options));
  cli.addArgument(new TypedArgument<String>().setType(String.class).setArgName("verticle").setIndex(0).setRequired(false));
  CommandLine evaluated=cli.parse(Collections.singletonList("-ha"));
  assertThat((boolean)evaluated.getOptionValue("ha")).isTrue();
  assertThat((String)evaluated.getArgumentValue("verticle")).isNull();
  assertThat((String)evaluated.getArgumentValue(0)).isNull();
  evaluated=cli.parse(Arrays.asList("-ha","true"));
  assertThat((boolean)evaluated.getOptionValue("ha")).isTrue();
  evaluated=cli.parse(Collections.singletonList("-ha=true"));
  assertThat((boolean)evaluated.getOptionValue("ha")).isTrue();
  evaluated=cli.parse(Collections.singletonList("--ha"));
  assertThat((boolean)evaluated.getOptionValue("ha")).isTrue();
  evaluated=cli.parse(Arrays.asList("--ha","false"));
  assertThat((boolean)evaluated.getOptionValue("ha")).isFalse();
  evaluated=cli.parse(Collections.singletonList("--ha=no"));
  assertThat((boolean)evaluated.getOptionValue("ha")).isFalse();
  evaluated=cli.parse(Arrays.asList("org.acme.FooVerticle","-instances=4","-cp","." + File.pathSeparator + "my.jar"));
  assertThat(evaluated.allArguments()).hasSize(1).containsExactly("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue("verticle")).isEqualTo("org.acme.FooVerticle");
  int instances=evaluated.getOptionValue("instances");
  List<String> classpath=evaluated.getOptionValues("classpath");
  assertThat(instances).isEqualTo(4);
  assertThat(classpath).containsExactly(".","my.jar");
  evaluated=cli.parse(Arrays.asList("org.acme.FooVerticle","-cluster"));
  assertThat(evaluated.allArguments()).hasSize(1).containsExactly("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue("verticle")).isEqualTo("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue(0)).isEqualTo("org.acme.FooVerticle");
  assertThat((boolean)evaluated.getOptionValue("cluster")).isTrue();
  evaluated=cli.parse(Arrays.asList("org.acme.FooVerticle","--cluster"));
  assertThat(evaluated.allArguments()).hasSize(1).containsExactly("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue("verticle")).isEqualTo("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue(0)).isEqualTo("org.acme.FooVerticle");
  assertThat((boolean)evaluated.getOptionValue("cluster")).isTrue();
  evaluated=cli.parse(Arrays.asList("org.acme.FooVerticle","-cluster","-cluster-host","127.0.0.1"));
  assertThat(evaluated.allArguments()).hasSize(1).containsExactly("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue("verticle")).isEqualTo("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue(0)).isEqualTo("org.acme.FooVerticle");
  assertThat((boolean)evaluated.getOptionValue("cluster")).isTrue();
  assertThat((String)evaluated.getOptionValue("cluster-host")).isEqualTo("127.0.0.1");
  evaluated=cli.parse(Arrays.asList("org.acme.FooVerticle","-cluster","--cluster-host","127.0.0.1"));
  assertThat(evaluated.allArguments()).hasSize(1).containsExactly("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue("verticle")).isEqualTo("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue(0)).isEqualTo("org.acme.FooVerticle");
  assertThat((boolean)evaluated.getOptionValue("cluster")).isTrue();
  assertThat((String)evaluated.getOptionValue("cluster-host")).isEqualTo("127.0.0.1");
  evaluated=cli.parse(Arrays.asList("org.acme.FooVerticle","-cluster","-cluster-host=127.0.0.1"));
  assertThat(evaluated.allArguments()).hasSize(1).containsExactly("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue("verticle")).isEqualTo("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue(0)).isEqualTo("org.acme.FooVerticle");
  assertThat((boolean)evaluated.getOptionValue("cluster")).isTrue();
  assertThat((String)evaluated.getOptionValue("cluster-host")).isEqualTo("127.0.0.1");
  evaluated=cli.parse(Arrays.asList("org.acme.FooVerticle","-cluster","-cluster-host","127.0.0.1","-cluster-port","1234"));
  assertThat(evaluated.allArguments()).hasSize(1).containsExactly("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue("verticle")).isEqualTo("org.acme.FooVerticle");
  assertThat((String)evaluated.getArgumentValue(0)).isEqualTo("org.acme.FooVerticle");
  assertThat((boolean)evaluated.getOptionValue("cluster")).isTrue();
  assertThat((String)evaluated.getOptionValue("cluster-host")).isEqualTo("127.0.0.1");
  assertThat((int)evaluated.getOptionValue("cluster-port")).isEqualTo(1234);
}
