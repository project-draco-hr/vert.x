{
  final String deployID=startMod("io.vertx~mod-maven-server~1.0",null,1,false);
  final CountDownLatch latch=new CountDownLatch(1);
  platformManager.pullInDependencies("io.vertx~mod-pullin~1.0",new Handler<AsyncResult<Void>>(){
    @Override public void handle(    AsyncResult<Void> res){
      assertTrue(res.succeeded());
      try {
        stopApp(deployID,false);
      }
 catch (      Exception e) {
        fail("caught exception");
      }
      assertFileExists(MOD_TEST_BASE + "/io.vertx~mod-pullin~1.0/mods");
      assertFileExists(MOD_TEST_BASE + "/io.vertx~mod-pullin~1.0/mods/io.vertx~mod-pullin-a~2.0.0");
      assertFileExists(MOD_TEST_BASE + "/io.vertx~mod-pullin~1.0/mods/io.vertx~mod-pullin-b~1.0.1");
      assertFileExists(MOD_TEST_BASE + "/io.vertx~mod-pullin~1.0/mods/io.vertx~mod-pullin-c~0.1");
      assertFileExists(MOD_TEST_BASE + "/io.vertx~mod-pullin~1.0/mods/io.vertx~mod-pullin-d~1.2-beta");
      assertFileExists(MOD_TEST_BASE + "/io.vertx~mod-pullin~1.0/mods/io.vertx~mod-pullin-d~1.2-beta/mods/io.vertx~mod-pullin-e~2.2");
      latch.countDown();
    }
  }
);
  try {
    if (!latch.await(20000,TimeUnit.SECONDS)) {
      throw new IllegalStateException("Timed out");
    }
  }
 catch (  InterruptedException e) {
  }
}
