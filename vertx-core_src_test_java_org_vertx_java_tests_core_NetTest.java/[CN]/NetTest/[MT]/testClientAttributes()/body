{
  assertEquals(client,client.setSSL(false));
  assertFalse(client.isSSL());
  assertEquals(client,client.setSSL(true));
  assertTrue(client.isSSL());
  String pwd=TestUtils.randomUnicodeString(10);
  assertEquals(client,client.setKeyStorePassword(pwd));
  assertEquals(pwd,client.getKeyStorePassword());
  String path=TestUtils.randomUnicodeString(10);
  assertEquals(client,client.setKeyStorePath(path));
  assertEquals(path,client.getKeyStorePath());
  pwd=TestUtils.randomUnicodeString(10);
  assertEquals(client,client.setTrustStorePassword(pwd));
  assertEquals(pwd,client.getTrustStorePassword());
  path=TestUtils.randomUnicodeString(10);
  assertEquals(client,client.setTrustStorePath(path));
  assertEquals(path,client.getTrustStorePath());
  assertEquals(client,client.setReuseAddress(true));
  assertTrue(client.isReuseAddress());
  assertEquals(client,client.setReuseAddress(false));
  assertTrue(!client.isReuseAddress());
  assertEquals(client,client.setSoLinger(10));
  assertEquals(10,client.getSoLinger());
  assertEquals(client,client.setTCPKeepAlive(true));
  assertTrue(client.isTCPKeepAlive());
  assertEquals(client,client.setTCPKeepAlive(false));
  assertFalse(client.isTCPKeepAlive());
  assertEquals(client,client.setTCPNoDelay(true));
  assertTrue(client.isTCPNoDelay());
  assertEquals(client,client.setTCPNoDelay(false));
  assertFalse(client.isTCPNoDelay());
  assertEquals(client,client.setUsePooledBuffers(true));
  assertTrue(client.isUsePooledBuffers());
  assertEquals(client,client.setUsePooledBuffers(false));
  assertFalse(client.isUsePooledBuffers());
  int reconnectAttempts=new Random().nextInt(1000) + 1;
  assertEquals(client,client.setReconnectAttempts(reconnectAttempts));
  assertEquals(reconnectAttempts,client.getReconnectAttempts());
  try {
    client.setReconnectAttempts(-2);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int reconnectDelay=new Random().nextInt(1000) + 1;
  assertEquals(client,client.setReconnectInterval(reconnectDelay));
  assertEquals(reconnectDelay,client.getReconnectInterval());
  try {
    client.setReconnectInterval(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client.setReconnectInterval(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int rbs=new Random().nextInt(1024 * 1024) + 1;
  assertEquals(client,client.setReceiveBufferSize(rbs));
  assertEquals(rbs,client.getReceiveBufferSize());
  try {
    client.setReceiveBufferSize(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client.setReceiveBufferSize(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int sbs=new Random().nextInt(1024 * 1024);
  assertEquals(client,client.setSendBufferSize(sbs));
  assertEquals(sbs,client.getSendBufferSize());
  try {
    client.setSendBufferSize(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client.setSendBufferSize(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int trafficClass=new Random().nextInt(10000000);
  assertEquals(client,client.setTrafficClass(trafficClass));
  assertEquals(trafficClass,client.getTrafficClass());
}
