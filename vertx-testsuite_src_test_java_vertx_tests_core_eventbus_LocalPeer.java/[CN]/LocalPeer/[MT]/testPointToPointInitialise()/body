{
  final String address=UUID.randomUUID().toString();
  vertx.sharedData().getSet("addresses").add(address);
  eb.registerHandler(address,new Handler<Message<Buffer>>(){
    boolean handled=false;
    public void handle(    Message<Buffer> msg){
      tu.checkThread();
      tu.azzert(!handled);
      tu.azzert(TestUtils.buffersEqual((Buffer)data.get("buffer"),msg.body()));
      eb.unregisterHandler(address,this,new AsyncResultHandler<Void>(){
        public void handle(        AsyncResult<Void> event){
          if (event.succeeded()) {
            tu.testComplete();
          }
 else {
            tu.azzert(false,"Failed to unregister");
          }
        }
      }
);
      handled=true;
    }
  }
,new AsyncResultHandler<Void>(){
    public void handle(    AsyncResult<Void> event){
      if (event.succeeded()) {
        tu.testComplete();
      }
 else {
        tu.azzert(false,"Failed to register");
      }
    }
  }
);
}
