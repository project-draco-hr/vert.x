{
  if (json.getValue("config") instanceof JsonObject) {
    obj.setConfig(((JsonObject)json.getValue("config")).copy());
  }
  if (json.getValue("extraClasspath") instanceof JsonArray) {
    java.util.List<java.lang.String> list=new java.util.ArrayList<>();
    for (    Object item : json.getJsonArray("extraClasspath")) {
      if (item instanceof String)       list.add((String)item);
    }
    ;
    obj.setExtraClasspath(list);
  }
  if (json.getValue("ha") instanceof Boolean) {
    obj.setHa((Boolean)json.getValue("ha"));
  }
  if (json.getValue("instances") instanceof Number) {
    obj.setInstances(((Number)json.getValue("instances")).intValue());
  }
  if (json.getValue("isolatedClasses") instanceof JsonArray) {
    java.util.List<java.lang.String> list=new java.util.ArrayList<>();
    for (    Object item : json.getJsonArray("isolatedClasses")) {
      if (item instanceof String)       list.add((String)item);
    }
    ;
    obj.setIsolatedClasses(list);
  }
  if (json.getValue("isolationGroup") instanceof String) {
    obj.setIsolationGroup((String)json.getValue("isolationGroup"));
  }
  if (json.getValue("multiThreaded") instanceof Boolean) {
    obj.setMultiThreaded((Boolean)json.getValue("multiThreaded"));
  }
  if (json.getValue("worker") instanceof Boolean) {
    obj.setWorker((Boolean)json.getValue("worker"));
  }
}
