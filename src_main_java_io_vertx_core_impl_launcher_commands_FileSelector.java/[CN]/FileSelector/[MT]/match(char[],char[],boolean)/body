{
  int patIdxStart=0;
  int patIdxEnd=patArr.length - 1;
  int strIdxStart=0;
  int strIdxEnd=strArr.length - 1;
  char ch;
  boolean containsStar=false;
  for (  char aPatArr : patArr) {
    if (aPatArr == '*') {
      containsStar=true;
      break;
    }
  }
  if (!containsStar) {
    if (patIdxEnd != strIdxEnd) {
      return false;
    }
    for (int i=0; i <= patIdxEnd; i++) {
      ch=patArr[i];
      if (ch != '?' && !equals(ch,strArr[i],isCaseSensitive)) {
        return false;
      }
    }
    return true;
  }
  if (patIdxEnd == 0) {
    return true;
  }
  while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {
    if (ch != '?' && !equals(ch,strArr[strIdxStart],isCaseSensitive)) {
      return false;
    }
    patIdxStart++;
    strIdxStart++;
  }
  if (strIdxStart > strIdxEnd) {
    return checkOnlyStartsLeft(patArr,patIdxStart,patIdxEnd);
  }
  while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {
    if (ch != '?' && !equals(ch,strArr[strIdxEnd],isCaseSensitive)) {
      return false;
    }
    patIdxEnd--;
    strIdxEnd--;
  }
  if (strIdxStart > strIdxEnd) {
    return checkOnlyStartsLeft(patArr,patIdxStart,patIdxEnd);
  }
  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
    int patIdxTmp=-1;
    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {
      if (patArr[i] == '*') {
        patIdxTmp=i;
        break;
      }
    }
    if (patIdxTmp == patIdxStart + 1) {
      patIdxStart++;
      continue;
    }
    int patLength=(patIdxTmp - patIdxStart - 1);
    int strLength=(strIdxEnd - strIdxStart + 1);
    int foundIdx=-1;
    strLoop:     for (int i=0; i <= strLength - patLength; i++) {
      for (int j=0; j < patLength; j++) {
        ch=patArr[patIdxStart + j + 1];
        if (ch != '?' && !equals(ch,strArr[strIdxStart + i + j],isCaseSensitive)) {
          continue strLoop;
        }
      }
      foundIdx=strIdxStart + i;
      break;
    }
    if (foundIdx == -1) {
      return false;
    }
    patIdxStart=patIdxTmp;
    strIdxStart=foundIdx + patLength;
  }
  return checkOnlyStartsLeft(patArr,patIdxStart,patIdxEnd);
}
