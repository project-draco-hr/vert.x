{
  final String body="Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
  final Buffer bodyBuff=new Buffer(body);
  AsyncResultHandler<HttpServer> handler=new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      final HttpClientRequest req=getRequest(true,"GET","some-uri",new Handler<HttpClientResponse>(){
        public void handle(        HttpClientResponse resp){
          tu.checkThread();
          resp.bodyHandler(new Handler<Buffer>(){
            public void handle(            Buffer buff){
              tu.azzert(TestUtils.buffersEqual(bodyBuff,buff));
              tu.testComplete();
            }
          }
);
        }
      }
);
      if (compression()) {
        req.putHeader("Accept-Encoding","deflate");
      }
      req.exceptionHandler(new Handler<Throwable>(){
        @Override public void handle(        Throwable event){
          event.printStackTrace();
        }
      }
);
      req.end();
    }
  }
;
  startServer(new Handler<HttpServerRequest>(){
    public void handle(    final HttpServerRequest req){
      tu.checkThread();
      req.response().exceptionHandler(new Handler<Throwable>(){
        @Override public void handle(        Throwable event){
          event.printStackTrace();
        }
      }
);
      req.response().setChunked(true);
      req.response().write(body);
      req.response().end();
    }
  }
,handler);
}
