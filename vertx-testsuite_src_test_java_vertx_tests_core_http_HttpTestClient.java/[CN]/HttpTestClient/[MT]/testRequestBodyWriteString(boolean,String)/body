{
  final String body=TestUtils.randomUnicodeString(1000);
  final Buffer bodyBuff;
  if (encoding == null) {
    bodyBuff=new Buffer(body);
  }
 else {
    bodyBuff=new Buffer(body,encoding);
  }
  AsyncResultHandler<HttpServer> handler=new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      final HttpClientRequest req=getRequest(true,"POST","some-uri",new Handler<HttpClientResponse>(){
        public void handle(        HttpClientResponse resp){
          tu.checkThread();
          tu.testComplete();
        }
      }
);
      if (chunked) {
        req.setChunked(true);
      }
 else {
        req.headers().set("Content-Length",String.valueOf(bodyBuff.length()));
      }
      if (encoding == null) {
        req.write(body);
      }
 else {
        req.write(body,encoding);
      }
      req.end();
    }
  }
;
  startServer(new Handler<HttpServerRequest>(){
    public void handle(    HttpServerRequest req){
      tu.checkThread();
      req.bodyHandler(new Handler<Buffer>(){
        public void handle(        Buffer buff){
          tu.azzert(TestUtils.buffersEqual(bodyBuff,buff));
          tu.testComplete();
        }
      }
);
    }
  }
,handler);
}
