{
  final int requests=100;
  AsyncResultHandler<HttpServer> handler=new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      for (int count=0; count < requests; count++) {
        final int theCount=count;
        HttpClientRequest req=client.request("POST","some-uri",new Handler<HttpClientResponse>(){
          public void handle(          final HttpClientResponse response){
            tu.azzert(theCount == Integer.parseInt(response.headers().get("count")),theCount + ":" + response.headers().get("count"));
            response.bodyHandler(new Handler<Buffer>(){
              public void handle(              Buffer buff){
                tu.azzert(("This is content " + theCount).equals(buff.toString()));
                if (theCount == requests - 1) {
                  tu.testComplete();
                }
              }
            }
);
          }
        }
);
        req.setChunked(true);
        req.headers().set("count",String.valueOf(count));
        req.write("This is content " + count);
        req.end();
      }
    }
  }
;
  startServer(new Handler<HttpServerRequest>(){
    int count;
    public void handle(    final HttpServerRequest req){
      tu.azzert(count == Integer.parseInt(req.headers().get("count")));
      final int theCount=count;
      count++;
      req.response().setChunked(true);
      req.bodyHandler(new Handler<Buffer>(){
        public void handle(        final Buffer buff){
          tu.azzert(("This is content " + theCount).equals(buff.toString()),buff.toString());
          vertx.setTimer(1 + (long)(10 * Math.random()),new Handler<Long>(){
            public void handle(            Long timerID){
              req.response().headers().set("count",String.valueOf(theCount));
              req.response().write(buff);
              req.response().end();
            }
          }
);
        }
      }
);
    }
  }
,handler);
}
