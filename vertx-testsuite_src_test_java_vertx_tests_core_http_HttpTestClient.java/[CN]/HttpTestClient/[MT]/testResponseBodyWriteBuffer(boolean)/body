{
  final Buffer body=new Buffer();
  final int numWrites=10;
  final int chunkSize=100;
  AsyncResultHandler<HttpServer> handler=new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      HttpClientRequest req=getRequest(true,"GET","some-uri",new Handler<HttpClientResponse>(){
        public void handle(        HttpClientResponse resp){
          tu.checkThread();
          resp.bodyHandler(new Handler<Buffer>(){
            public void handle(            Buffer buff){
              tu.azzert(TestUtils.buffersEqual(body,buff));
              tu.testComplete();
            }
          }
);
        }
      }
);
      req.end();
    }
  }
;
  startServer(new Handler<HttpServerRequest>(){
    public void handle(    HttpServerRequest req){
      tu.checkThread();
      if (chunked) {
        req.response().setChunked(true);
      }
 else {
        req.response().headers().set("Content-Length",String.valueOf(numWrites * chunkSize));
      }
      for (int i=0; i < numWrites; i++) {
        Buffer b=TestUtils.generateRandomBuffer(chunkSize);
        body.appendBuffer(b);
        req.response().write(b);
      }
      req.response().end();
    }
  }
,handler);
}
