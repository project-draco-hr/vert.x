{
  final MultiMap trailers=getHeaders(10);
  AsyncResultHandler<HttpServer> handler=new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      HttpClientRequest req=getRequest(true,"GET","some-uri",new Handler<HttpClientResponse>(){
        public void handle(        final HttpClientResponse resp){
          tu.checkThread();
          resp.endHandler(new VoidHandler(){
            public void handle(){
              tu.azzert(resp.trailers().size() == trailers.size());
              for (              Map.Entry<String,String> entry : trailers) {
                tu.azzert(entry.getValue().equals(resp.trailers().get(entry.getKey())));
              }
              tu.testComplete();
            }
          }
);
        }
      }
);
      req.end();
    }
  }
;
  startServer(new Handler<HttpServerRequest>(){
    public void handle(    HttpServerRequest req){
      tu.checkThread();
      req.response().setChunked(true);
      if (individually) {
        for (        Map.Entry<String,String> header : trailers) {
          req.response().trailers().add(header.getKey(),header.getValue());
        }
      }
 else {
        req.response().trailers().set(trailers);
      }
      req.response().end();
    }
  }
,handler);
}
