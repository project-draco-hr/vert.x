{
  AsyncResultHandler<HttpServer> handler=new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      HttpClientRequest req=getRequest(true,"GET","some-uri",new Handler<HttpClientResponse>(){
        public void handle(        HttpClientResponse resp){
          tu.azzert(resp.headers().get("Quux").equals("quux"));
          tu.azzert(resp.headers().get("quux").equals("quux"));
          tu.azzert(resp.headers().get("qUUX").equals("quux"));
          tu.azzert(resp.headers().contains("Quux"));
          tu.azzert(resp.headers().contains("quux"));
          tu.azzert(resp.headers().contains("qUUX"));
          tu.checkThread();
          tu.testComplete();
        }
      }
);
      req.putHeader("Foo","foo");
      tu.azzert(req.headers().get("Foo").equals("foo"));
      tu.azzert(req.headers().get("foo").equals("foo"));
      tu.azzert(req.headers().get("fOO").equals("foo"));
      tu.azzert(req.headers().contains("Foo"));
      tu.azzert(req.headers().contains("foo"));
      tu.azzert(req.headers().contains("fOO"));
      req.end();
    }
  }
;
  startServer(new Handler<HttpServerRequest>(){
    public void handle(    HttpServerRequest req){
      tu.checkThread();
      tu.azzert(req.headers().get("Foo").equals("foo"));
      tu.azzert(req.headers().get("foo").equals("foo"));
      tu.azzert(req.headers().get("fOO").equals("foo"));
      tu.azzert(req.headers().contains("Foo"));
      tu.azzert(req.headers().contains("foo"));
      tu.azzert(req.headers().contains("fOO"));
      req.response().putHeader("Quux","quux");
      tu.azzert(req.response().headers().get("Quux").equals("quux"));
      tu.azzert(req.response().headers().get("quux").equals("quux"));
      tu.azzert(req.response().headers().get("qUUX").equals("quux"));
      tu.azzert(req.response().headers().contains("Quux"));
      tu.azzert(req.response().headers().contains("quux"));
      tu.azzert(req.response().headers().contains("qUUX"));
      req.response().end();
    }
  }
,handler);
}
