{
  final Buffer toSend=TestUtils.generateRandomBuffer(1000);
  AsyncResultHandler<HttpServer> handler=new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      final HttpClientRequest req=client.get("someurl",new Handler<HttpClientResponse>(){
        public void handle(        final HttpClientResponse resp){
          resp.endHandler(new Handler<Void>(){
            @Override public void handle(            Void event){
              tu.checkThread();
              NetSocket socket=resp.netSocket();
              tu.azzert(socket != null);
              tu.testComplete();
            }
          }
);
        }
      }
);
      req.headers().set("content-length",String.valueOf(toSend.length()));
      req.write(toSend);
    }
  }
;
  startServer(new Handler<HttpServerRequest>(){
    public void handle(    final HttpServerRequest req){
      req.response().headers().set("HTTP/1.1","101 Upgrade");
      req.bodyHandler(new Handler<Buffer>(){
        public void handle(        Buffer data){
          tu.checkThread();
          tu.azzert(TestUtils.buffersEqual(toSend,data));
          req.response().end();
        }
      }
);
    }
  }
,handler);
}
