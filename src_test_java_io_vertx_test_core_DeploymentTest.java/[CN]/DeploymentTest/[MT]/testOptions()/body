{
  DeploymentOptions options=new DeploymentOptions();
  assertNull(options.getConfig());
  JsonObject config=new JsonObject().put("foo","bar").put("obj",new JsonObject().put("quux",123));
  assertEquals(options,options.setConfig(config));
  assertEquals(config,options.getConfig());
  assertFalse(options.isWorker());
  assertEquals(options,options.setWorker(true));
  assertTrue(options.isWorker());
  assertFalse(options.isMultiThreaded());
  assertEquals(options,options.setMultiThreaded(true));
  assertTrue(options.isMultiThreaded());
  assertNull(options.getIsolationGroup());
  String rand=TestUtils.randomUnicodeString(1000);
  assertEquals(options,options.setIsolationGroup(rand));
  assertEquals(rand,options.getIsolationGroup());
  assertFalse(options.isHa());
  assertEquals(options,options.setHa(true));
  assertTrue(options.isHa());
  assertNull(options.getExtraClasspath());
  List<String> cp=Arrays.asList("foo","bar");
  assertEquals(options,options.setExtraClasspath(cp));
  assertSame(cp,options.getExtraClasspath());
  assertFalse(options.isRedeploy());
  assertSame(options,options.setRedeploy(true));
  assertTrue(options.isRedeploy());
  assertEquals(DeploymentOptions.DEFAULT_REDEPLOY_GRACE_INTERVAL,options.getRedeployGraceInterval());
  int randInt=TestUtils.randomPositiveInt();
  assertEquals(options,options.setRedeployGraceInterval(randInt));
  assertEquals(randInt,options.getRedeployGraceInterval());
  randInt=TestUtils.randomPositiveInt();
  assertEquals(options,options.setRedeployScanInterval(randInt));
  assertEquals(randInt,options.getRedeployScanInterval());
  try {
    options.setRedeployGraceInterval(-1);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setRedeployScanInterval(-1);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setRedeployGraceInterval(0);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setRedeployScanInterval(0);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
}
