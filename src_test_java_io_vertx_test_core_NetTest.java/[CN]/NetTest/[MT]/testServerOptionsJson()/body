{
  int sendBufferSize=TestUtils.randomPositiveInt();
  int receiverBufferSize=TestUtils.randomPortInt();
  Random rand=new Random();
  boolean reuseAddress=rand.nextBoolean();
  int trafficClass=TestUtils.randomByte() + 127;
  boolean tcpNoDelay=rand.nextBoolean();
  boolean tcpKeepAlive=rand.nextBoolean();
  int soLinger=TestUtils.randomPositiveInt();
  boolean usePooledBuffers=rand.nextBoolean();
  int idleTimeout=TestUtils.randomInt();
  boolean ssl=rand.nextBoolean();
  JksOptions keyStoreOptions=new JksOptions();
  String ksPassword=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPassword(ksPassword);
  String ksPath=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPath(ksPath);
  JksOptions trustStoreOptions=new JksOptions();
  String tsPassword=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPassword(tsPassword);
  String tsPath=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPath(tsPath);
  String enabledCipher=TestUtils.randomAlphaString(100);
  String crlPath=TestUtils.randomUnicodeString(100);
  int port=1234;
  String host=TestUtils.randomAlphaString(100);
  int acceptBacklog=TestUtils.randomPortInt();
  JsonObject json=new JsonObject();
  json.put("sendBufferSize",sendBufferSize).put("receiveBufferSize",receiverBufferSize).put("reuseAddress",reuseAddress).put("trafficClass",trafficClass).put("tcpNoDelay",tcpNoDelay).put("tcpKeepAlive",tcpKeepAlive).put("soLinger",soLinger).put("usePooledBuffers",usePooledBuffers).put("idleTimeout",idleTimeout).put("ssl",ssl).put("enabledCipherSuites",new JsonArray().add(enabledCipher)).put("crlPaths",new JsonArray().add(crlPath)).put("keyStoreOptions",new JsonObject().put("password",ksPassword).put("path",ksPath)).put("trustStoreOptions",new JsonObject().put("password",tsPassword).put("path",tsPath)).put("port",port).put("host",host).put("acceptBacklog",acceptBacklog);
  NetServerOptions options=new NetServerOptions(json);
  assertEquals(sendBufferSize,options.getSendBufferSize());
  assertEquals(receiverBufferSize,options.getReceiveBufferSize());
  assertEquals(reuseAddress,options.isReuseAddress());
  assertEquals(trafficClass,options.getTrafficClass());
  assertEquals(tcpKeepAlive,options.isTcpKeepAlive());
  assertEquals(tcpNoDelay,options.isTcpNoDelay());
  assertEquals(soLinger,options.getSoLinger());
  assertEquals(usePooledBuffers,options.isUsePooledBuffers());
  assertEquals(idleTimeout,options.getIdleTimeout());
  assertEquals(ssl,options.isSsl());
  assertNotSame(keyStoreOptions,options.getKeyCertOptions());
  assertEquals(ksPassword,((JksOptions)options.getKeyCertOptions()).getPassword());
  assertEquals(ksPath,((JksOptions)options.getKeyCertOptions()).getPath());
  assertNotSame(trustStoreOptions,options.getCaOptions());
  assertEquals(tsPassword,((JksOptions)options.getCaOptions()).getPassword());
  assertEquals(tsPath,((JksOptions)options.getCaOptions()).getPath());
  assertEquals(1,options.getEnabledCipherSuites().size());
  assertTrue(options.getEnabledCipherSuites().contains(enabledCipher));
  assertEquals(1,options.getCrlPaths().size());
  assertEquals(crlPath,options.getCrlPaths().get(0));
  assertEquals(port,options.getPort());
  assertEquals(host,options.getHost());
  assertEquals(acceptBacklog,options.getAcceptBacklog());
  json.remove("keyStoreOptions");
  json.remove("trustStoreOptions");
  json.put("pfxKeyCertOptions",new JsonObject().put("password",ksPassword)).put("pfxCaOptions",new JsonObject().put("password",tsPassword));
  options=new NetServerOptions(json);
  assertTrue(options.getCaOptions() instanceof PfxOptions);
  assertTrue(options.getKeyCertOptions() instanceof PfxOptions);
  json.remove("pfxKeyCertOptions");
  json.remove("pfxCaOptions");
  json.put("pemKeyCertOptions",new JsonObject()).put("pemCaOptions",new JsonObject());
  options=new NetServerOptions(json);
  assertTrue(options.getCaOptions() instanceof PemCaOptions);
  assertTrue(options.getKeyCertOptions() instanceof PemKeyCertOptions);
}
