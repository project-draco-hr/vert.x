{
  HttpServerOptions options=new HttpServerOptions();
  int sendBufferSize=TestUtils.randomPositiveInt();
  int receiverBufferSize=TestUtils.randomPortInt();
  Random rand=new Random();
  boolean reuseAddress=rand.nextBoolean();
  int trafficClass=TestUtils.randomByte() + 128;
  boolean tcpNoDelay=rand.nextBoolean();
  boolean tcpKeepAlive=rand.nextBoolean();
  int soLinger=TestUtils.randomPositiveInt();
  boolean usePooledBuffers=rand.nextBoolean();
  int idleTimeout=TestUtils.randomPositiveInt();
  boolean ssl=rand.nextBoolean();
  JksOptions keyStoreOptions=new JksOptions();
  String ksPassword=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPassword(ksPassword);
  JksOptions trustStoreOptions=new JksOptions();
  String tsPassword=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPassword(tsPassword);
  String enabledCipher=TestUtils.randomAlphaString(100);
  String crlPath=TestUtils.randomUnicodeString(100);
  Buffer crlValue=TestUtils.randomBuffer(100);
  int port=1234;
  String host=TestUtils.randomAlphaString(100);
  int acceptBacklog=TestUtils.randomPortInt();
  boolean compressionSupported=rand.nextBoolean();
  int maxWebsocketFrameSize=TestUtils.randomPositiveInt();
  String wsSubProtocol=TestUtils.randomAlphaString(10);
  boolean is100ContinueHandledAutomatically=rand.nextBoolean();
  int maxChunkSize=rand.nextInt(10000);
  Http2Settings initialSettings=randomHttp2Settings();
  boolean useAlpn=TestUtils.randomBoolean();
  int http2ConnectionWindowSize=TestUtils.randomInt();
  SSLEngine sslEngine=TestUtils.randomBoolean() ? SSLEngine.JDK : SSLEngine.OPENSSL;
  List<HttpVersion> alpnVersions=Collections.singletonList(HttpVersion.values()[TestUtils.randomPositiveInt() % 3]);
  options.setSendBufferSize(sendBufferSize);
  options.setReceiveBufferSize(receiverBufferSize);
  options.setReuseAddress(reuseAddress);
  options.setTrafficClass(trafficClass);
  options.setTcpNoDelay(tcpNoDelay);
  options.setTcpKeepAlive(tcpKeepAlive);
  options.setSoLinger(soLinger);
  options.setUsePooledBuffers(usePooledBuffers);
  options.setIdleTimeout(idleTimeout);
  options.setSsl(ssl);
  options.setKeyStoreOptions(keyStoreOptions);
  options.setTrustStoreOptions(trustStoreOptions);
  options.addEnabledCipherSuite(enabledCipher);
  options.addCrlPath(crlPath);
  options.addCrlValue(crlValue);
  options.setPort(port);
  options.setHost(host);
  options.setAcceptBacklog(acceptBacklog);
  options.setCompressionSupported(compressionSupported);
  options.setMaxWebsocketFrameSize(maxWebsocketFrameSize);
  options.setWebsocketSubProtocols(wsSubProtocol);
  options.setHandle100ContinueAutomatically(is100ContinueHandledAutomatically);
  options.setMaxChunkSize(maxChunkSize);
  options.setUseAlpn(useAlpn);
  options.setHttp2ConnectionWindowSize(http2ConnectionWindowSize);
  options.setSslEngine(sslEngine);
  options.setInitialSettings(initialSettings);
  options.setAlpnVersions(alpnVersions);
  HttpServerOptions copy=new HttpServerOptions(options);
  assertEquals(sendBufferSize,copy.getSendBufferSize());
  assertEquals(receiverBufferSize,copy.getReceiveBufferSize());
  assertEquals(reuseAddress,copy.isReuseAddress());
  assertEquals(trafficClass,copy.getTrafficClass());
  assertEquals(tcpNoDelay,copy.isTcpNoDelay());
  assertEquals(tcpKeepAlive,copy.isTcpKeepAlive());
  assertEquals(soLinger,copy.getSoLinger());
  assertEquals(usePooledBuffers,copy.isUsePooledBuffers());
  assertEquals(idleTimeout,copy.getIdleTimeout());
  assertEquals(ssl,copy.isSsl());
  assertNotSame(keyStoreOptions,copy.getKeyCertOptions());
  assertEquals(ksPassword,((JksOptions)copy.getKeyCertOptions()).getPassword());
  assertNotSame(trustStoreOptions,copy.getTrustOptions());
  assertEquals(tsPassword,((JksOptions)copy.getTrustOptions()).getPassword());
  assertEquals(1,copy.getEnabledCipherSuites().size());
  assertTrue(copy.getEnabledCipherSuites().contains(enabledCipher));
  assertEquals(1,copy.getCrlPaths().size());
  assertEquals(crlPath,copy.getCrlPaths().get(0));
  assertEquals(1,copy.getCrlValues().size());
  assertEquals(crlValue,copy.getCrlValues().get(0));
  assertEquals(port,copy.getPort());
  assertEquals(host,copy.getHost());
  assertEquals(acceptBacklog,copy.getAcceptBacklog());
  assertEquals(compressionSupported,copy.isCompressionSupported());
  assertEquals(maxWebsocketFrameSize,copy.getMaxWebsocketFrameSize());
  assertEquals(wsSubProtocol,copy.getWebsocketSubProtocols());
  assertEquals(is100ContinueHandledAutomatically,copy.isHandle100ContinueAutomatically());
  assertEquals(maxChunkSize,copy.getMaxChunkSize());
  assertEquals(initialSettings,copy.getInitialSettings());
  assertEquals(useAlpn,copy.isUseAlpn());
  assertEquals(http2ConnectionWindowSize,copy.getHttp2ConnectionWindowSize());
  assertEquals(sslEngine,copy.getSslEngine());
  assertEquals(alpnVersions,copy.getAlpnVersions());
}
