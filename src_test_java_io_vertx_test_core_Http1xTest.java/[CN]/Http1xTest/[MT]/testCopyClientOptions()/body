{
  HttpClientOptions options=new HttpClientOptions();
  int sendBufferSize=TestUtils.randomPositiveInt();
  int receiverBufferSize=TestUtils.randomPortInt();
  Random rand=new Random();
  boolean reuseAddress=rand.nextBoolean();
  int trafficClass=TestUtils.randomByte() + 128;
  boolean tcpNoDelay=rand.nextBoolean();
  boolean tcpKeepAlive=rand.nextBoolean();
  int soLinger=TestUtils.randomPositiveInt();
  boolean usePooledBuffers=rand.nextBoolean();
  int idleTimeout=TestUtils.randomPositiveInt();
  boolean ssl=rand.nextBoolean();
  JksOptions keyStoreOptions=new JksOptions();
  String ksPassword=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPassword(ksPassword);
  JksOptions trustStoreOptions=new JksOptions();
  String tsPassword=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPassword(tsPassword);
  String enabledCipher=TestUtils.randomAlphaString(100);
  int connectTimeout=TestUtils.randomPositiveInt();
  boolean trustAll=rand.nextBoolean();
  String crlPath=TestUtils.randomUnicodeString(100);
  Buffer crlValue=TestUtils.randomBuffer(100);
  boolean verifyHost=rand.nextBoolean();
  int maxPoolSize=TestUtils.randomPositiveInt();
  boolean keepAlive=rand.nextBoolean();
  boolean pipelining=rand.nextBoolean();
  int pipeliningLimit=TestUtils.randomPositiveInt();
  int http2MaxPoolSize=TestUtils.randomPositiveInt();
  int http2MultiplexingLimit=TestUtils.randomPositiveInt();
  int http2ConnectionWindowSize=TestUtils.randomPositiveInt();
  boolean tryUseCompression=rand.nextBoolean();
  HttpVersion protocolVersion=HttpVersion.HTTP_1_0;
  int maxWaitQueueSize=TestUtils.randomPositiveInt();
  Http2Settings initialSettings=randomHttp2Settings();
  boolean useAlpn=TestUtils.randomBoolean();
  SSLEngine sslEngine=TestUtils.randomBoolean() ? SSLEngine.JDK : SSLEngine.OPENSSL;
  List<HttpVersion> alpnVersions=Collections.singletonList(HttpVersion.values()[TestUtils.randomPositiveInt() % 3]);
  boolean h2cUpgrade=TestUtils.randomBoolean();
  options.setSendBufferSize(sendBufferSize);
  options.setReceiveBufferSize(receiverBufferSize);
  options.setReuseAddress(reuseAddress);
  options.setTrafficClass(trafficClass);
  options.setSsl(ssl);
  options.setTcpNoDelay(tcpNoDelay);
  options.setTcpKeepAlive(tcpKeepAlive);
  options.setSoLinger(soLinger);
  options.setUsePooledBuffers(usePooledBuffers);
  options.setIdleTimeout(idleTimeout);
  options.setKeyStoreOptions(keyStoreOptions);
  options.setTrustStoreOptions(trustStoreOptions);
  options.addEnabledCipherSuite(enabledCipher);
  options.setConnectTimeout(connectTimeout);
  options.setTrustAll(trustAll);
  options.addCrlPath(crlPath);
  options.addCrlValue(crlValue);
  options.setVerifyHost(verifyHost);
  options.setMaxPoolSize(maxPoolSize);
  options.setKeepAlive(keepAlive);
  options.setPipelining(pipelining);
  options.setPipeliningLimit(pipeliningLimit);
  options.setHttp2MaxPoolSize(http2MaxPoolSize);
  options.setHttp2MultiplexingLimit(http2MultiplexingLimit);
  options.setHttp2ConnectionWindowSize(http2ConnectionWindowSize);
  options.setTryUseCompression(tryUseCompression);
  options.setProtocolVersion(protocolVersion);
  options.setMaxWaitQueueSize(maxWaitQueueSize);
  options.setInitialSettings(initialSettings);
  options.setUseAlpn(useAlpn);
  options.setSslEngine(sslEngine);
  options.setAlpnVersions(alpnVersions);
  options.setHttp2ClearTextUpgrade(h2cUpgrade);
  HttpClientOptions copy=new HttpClientOptions(options);
  assertEquals(sendBufferSize,copy.getSendBufferSize());
  assertEquals(receiverBufferSize,copy.getReceiveBufferSize());
  assertEquals(reuseAddress,copy.isReuseAddress());
  assertEquals(trafficClass,copy.getTrafficClass());
  assertEquals(tcpNoDelay,copy.isTcpNoDelay());
  assertEquals(tcpKeepAlive,copy.isTcpKeepAlive());
  assertEquals(soLinger,copy.getSoLinger());
  assertEquals(usePooledBuffers,copy.isUsePooledBuffers());
  assertEquals(idleTimeout,copy.getIdleTimeout());
  assertEquals(ssl,copy.isSsl());
  assertNotSame(keyStoreOptions,copy.getKeyCertOptions());
  assertEquals(ksPassword,((JksOptions)copy.getKeyCertOptions()).getPassword());
  assertNotSame(trustStoreOptions,copy.getTrustOptions());
  assertEquals(tsPassword,((JksOptions)copy.getTrustOptions()).getPassword());
  assertEquals(1,copy.getEnabledCipherSuites().size());
  assertTrue(copy.getEnabledCipherSuites().contains(enabledCipher));
  assertEquals(connectTimeout,copy.getConnectTimeout());
  assertEquals(trustAll,copy.isTrustAll());
  assertEquals(1,copy.getCrlPaths().size());
  assertEquals(crlPath,copy.getCrlPaths().get(0));
  assertEquals(1,copy.getCrlValues().size());
  assertEquals(crlValue,copy.getCrlValues().get(0));
  assertEquals(verifyHost,copy.isVerifyHost());
  assertEquals(maxPoolSize,copy.getMaxPoolSize());
  assertEquals(keepAlive,copy.isKeepAlive());
  assertEquals(pipelining,copy.isPipelining());
  assertEquals(pipeliningLimit,copy.getPipeliningLimit());
  assertEquals(http2MaxPoolSize,copy.getHttp2MaxPoolSize());
  assertEquals(http2MultiplexingLimit,copy.getHttp2MultiplexingLimit());
  assertEquals(http2ConnectionWindowSize,copy.getHttp2ConnectionWindowSize());
  assertEquals(tryUseCompression,copy.isTryUseCompression());
  assertEquals(protocolVersion,copy.getProtocolVersion());
  assertEquals(maxWaitQueueSize,copy.getMaxWaitQueueSize());
  assertEquals(initialSettings,copy.getInitialSettings());
  assertEquals(useAlpn,copy.isUseAlpn());
  assertEquals(sslEngine,copy.getSslEngine());
  assertEquals(alpnVersions,copy.getAlpnVersions());
  assertEquals(h2cUpgrade,copy.isHttp2ClearTextUpgrade());
}
