{
  final String path="/some/path";
  final String subProtocol="myprotocol";
  final Buffer buff=new Buffer("AAA");
  server=vertx.createHttpServer().setWebSocketSubProtocols("invalid").websocketHandler(new Handler<ServerWebSocket>(){
    public void handle(    final ServerWebSocket ws){
      tu.azzert(path.equals(ws.path()));
      ws.writeBinaryFrame(buff);
    }
  }
);
  server.listen(8080,"localhost",new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      client.connectWebsocket(path,version,null,Collections.singleton(subProtocol),new Handler<WebSocket>(){
        public void handle(        final WebSocket ws){
          final Buffer received=new Buffer();
          ws.dataHandler(new Handler<Buffer>(){
            public void handle(            Buffer data){
              received.appendBuffer(data);
              if (received.length() == buff.length()) {
                tu.azzert(TestUtils.buffersEqual(buff,received));
                ws.close();
                tu.testComplete();
              }
            }
          }
);
        }
      }
);
    }
  }
);
}
