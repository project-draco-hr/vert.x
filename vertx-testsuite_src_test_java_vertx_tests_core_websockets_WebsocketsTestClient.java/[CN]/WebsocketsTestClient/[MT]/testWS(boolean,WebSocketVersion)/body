{
  final String path="/some/path";
  final String query="foo=bar&wibble=eek";
  server=vertx.createHttpServer().websocketHandler(new Handler<ServerWebSocket>(){
    public void handle(    final ServerWebSocket ws){
      tu.checkThread();
      tu.azzert(path.equals(ws.path()));
      tu.azzert(query.equals(ws.query()));
      ws.dataHandler(new Handler<Buffer>(){
        public void handle(        Buffer data){
          tu.checkThread();
          ws.write(data);
        }
      }
);
    }
  }
);
  server.listen(8080,"localhost",new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      final int bsize=100;
      final int sends=10;
      client.connectWebsocket(path + "?" + query,version,new Handler<WebSocket>(){
        public void handle(        final WebSocket ws){
          tu.checkThread();
          final Buffer received=new Buffer();
          ws.dataHandler(new Handler<Buffer>(){
            public void handle(            Buffer data){
              tu.checkThread();
              received.appendBuffer(data);
              if (received.length() == bsize * sends) {
                ws.close();
                tu.testComplete();
              }
            }
          }
);
          final Buffer sent=new Buffer();
          for (int i=0; i < sends; i++) {
            if (binary) {
              Buffer buff=new Buffer(TestUtils.generateRandomByteArray(bsize));
              ws.writeBinaryFrame(buff);
              sent.appendBuffer(buff);
            }
 else {
              String str=TestUtils.randomAlphaString(bsize);
              ws.writeTextFrame(str);
              sent.appendBuffer(new Buffer(str,"UTF-8"));
            }
          }
        }
      }
);
    }
  }
);
}
