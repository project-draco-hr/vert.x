{
  WebSocketConnectOptions options=new WebSocketConnectOptions();
  assertEquals(80,options.getPort());
  assertEquals(options,options.setPort(1234));
  assertEquals(1234,options.getPort());
  try {
    options.setPort(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setPort(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setPort(65536);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals("localhost",options.getHost());
  String randString=randomUnicodeString(100);
  assertEquals(options,options.setHost(randString));
  assertEquals(randString,options.getHost());
  MultiMap headers=new CaseInsensitiveMultiMap();
  assertNull(options.getHeaders());
  assertEquals(options,options.setHeaders(headers));
  assertSame(headers,options.getHeaders());
  randString=randomUnicodeString(100);
  assertEquals("/",options.getRequestURI());
  assertEquals(options,options.setRequestURI(randString));
  assertEquals(randString,options.getRequestURI());
  options.putHeader("foo","bar");
  assertNotNull(options.getHeaders());
  assertEquals("bar",options.getHeaders().get("foo"));
  assertEquals(65536,options.getMaxWebsocketFrameSize());
  int rand=randomPositiveInt();
  assertEquals(options,options.setMaxWebsocketFrameSize(rand));
  assertEquals(rand,options.getMaxWebsocketFrameSize());
  try {
    options.setMaxWebsocketFrameSize(0);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    options.setMaxWebsocketFrameSize(-1);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals(WebSocketVersion.RFC6455,options.getVersion());
  assertEquals(options,options.setVersion(WebSocketVersion.HYBI_00));
  assertEquals(WebSocketVersion.HYBI_00,options.getVersion());
  assertNull(options.getSubProtocols());
  assertEquals(options,options.addSubProtocol("foo"));
  assertEquals(options,options.addSubProtocol("bar"));
  assertNotNull(options.getSubProtocols());
  assertTrue(options.getSubProtocols().contains("foo"));
  assertTrue(options.getSubProtocols().contains("bar"));
}
