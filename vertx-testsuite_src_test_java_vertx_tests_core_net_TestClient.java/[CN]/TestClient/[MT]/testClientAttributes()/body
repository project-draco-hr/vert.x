{
  tu.azzert(client.setSSL(false) == client);
  tu.azzert(!client.isSSL());
  tu.azzert(client.setSSL(true) == client);
  tu.azzert(client.isSSL());
  String pwd=TestUtils.randomUnicodeString(10);
  tu.azzert(client.setKeyStorePassword(pwd) == client);
  tu.azzert(client.getKeyStorePassword().equals(pwd));
  String path=TestUtils.randomUnicodeString(10);
  tu.azzert(client.setKeyStorePath(path) == client);
  tu.azzert(client.getKeyStorePath().equals(path));
  pwd=TestUtils.randomUnicodeString(10);
  tu.azzert(client.setTrustStorePassword(pwd) == client);
  tu.azzert(client.getTrustStorePassword().equals(pwd));
  path=TestUtils.randomUnicodeString(10);
  tu.azzert(client.setTrustStorePath(path) == client);
  tu.azzert(client.getTrustStorePath().equals(path));
  tu.azzert(client.setReuseAddress(true) == client);
  tu.azzert(client.isReuseAddress());
  tu.azzert(client.setReuseAddress(false) == client);
  tu.azzert(!client.isReuseAddress());
  tu.azzert(client.setSoLinger(10) == client);
  tu.azzert(client.getSoLinger() == 10);
  tu.azzert(client.setTCPKeepAlive(true) == client);
  tu.azzert(client.isTCPKeepAlive());
  tu.azzert(client.setTCPKeepAlive(false) == client);
  tu.azzert(!client.isTCPKeepAlive());
  tu.azzert(client.setTCPNoDelay(true) == client);
  tu.azzert(client.isTCPNoDelay());
  tu.azzert(client.setTCPNoDelay(false) == client);
  tu.azzert(!client.isTCPNoDelay());
  int reconnectAttempts=new Random().nextInt(1000) + 1;
  tu.azzert(client.setReconnectAttempts(reconnectAttempts) == client);
  tu.azzert(client.getReconnectAttempts() == reconnectAttempts);
  try {
    client.setReconnectAttempts(-2);
    tu.azzert(false,"Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int reconnectDelay=new Random().nextInt(1000) + 1;
  tu.azzert(client.setReconnectInterval(reconnectDelay) == client);
  tu.azzert(client.getReconnectInterval() == reconnectDelay);
  try {
    client.setReconnectInterval(-1);
    tu.azzert(false,"Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client.setReconnectInterval(0);
    tu.azzert(false,"Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int rbs=new Random().nextInt(1024 * 1024) + 1;
  tu.azzert(client.setReceiveBufferSize(rbs) == client);
  tu.azzert(client.getReceiveBufferSize() == rbs);
  try {
    client.setReceiveBufferSize(0);
    tu.azzert(false,"Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client.setReceiveBufferSize(-1);
    tu.azzert(false,"Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int sbs=new Random().nextInt(1024 * 1024);
  tu.azzert(client.setSendBufferSize(sbs) == client);
  tu.azzert(client.getSendBufferSize() == sbs);
  try {
    client.setSendBufferSize(0);
    tu.azzert(false,"Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client.setSendBufferSize(-1);
    tu.azzert(false,"Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  int trafficClass=new Random().nextInt(10000000);
  tu.azzert(client.setTrafficClass(trafficClass) == client);
  tu.azzert(client.getTrafficClass() == trafficClass);
  tu.testComplete();
}
