{
  if (failDuringFailover) {
    throw new VertxException("Oops!");
  }
  final String moduleName=failedModule.getString("module_name");
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<Throwable> err=new AtomicReference<>();
  DefaultContext ctx=vertx.getContext();
  vertx.setContext(null);
  platformManager.deployModule(moduleName,failedModule.getObject("conf"),failedModule.getInteger("instances"),true,new Handler<AsyncResult<String>>(){
    @Override public void handle(    AsyncResult<String> result){
      if (result.succeeded()) {
        log.info("Successfully redeployed module " + moduleName + " after failover");
      }
 else {
        log.error("Failed to redeploy module after failover",result.cause());
        err.set(result.cause());
      }
      latch.countDown();
      Throwable t=err.get();
      if (t != null) {
        throw new VertxException(t);
      }
    }
  }
);
  vertx.setContext(ctx);
  try {
    if (!latch.await(10,TimeUnit.SECONDS)) {
      throw new VertxException("Timed out waiting for redeploy on failover");
    }
  }
 catch (  InterruptedException e) {
    throw new IllegalStateException(e);
  }
}
