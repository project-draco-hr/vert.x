{
  HostnameResolverOptions options=new HostnameResolverOptions();
  assertEquals(HostnameResolverOptions.DEFAULT_OPT_RESOURCE_ENABLED,options.isOptResourceEnabled());
  assertEquals(HostnameResolverOptions.DEFAULT_SERVERS,options.getServers());
  assertEquals(HostnameResolverOptions.DEFAULT_CACHE_MIN_TIME_TO_LIVE,options.getCacheMinTimeToLive());
  assertEquals(HostnameResolverOptions.DEFAULT_CACHE_MAX_TIME_TO_LIVE,options.getCacheMaxTimeToLive());
  assertEquals(HostnameResolverOptions.DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE,options.getCacheNegativeTimeToLive());
  assertEquals(HostnameResolverOptions.DEFAULT_QUERY_TIMEOUT,options.getQueryTimeout());
  assertEquals(HostnameResolverOptions.DEFAULT_MAX_QUERIES,options.getMaxQueries());
  assertEquals(HostnameResolverOptions.DEFAULT_RD_FLAG,options.getRdFlag());
  boolean optResourceEnabled=TestUtils.randomBoolean();
  List<String> servers=Arrays.asList("1.2.3.4","5.6.7.8");
  int minTTL=TestUtils.randomPositiveInt();
  int maxTTL=minTTL + TestUtils.randomPositiveInt();
  int negativeTTL=TestUtils.randomPositiveInt();
  int queryTimeout=1 + TestUtils.randomPositiveInt();
  int maxQueries=1 + TestUtils.randomPositiveInt();
  boolean rdFlag=TestUtils.randomBoolean();
  assertSame(options,options.setOptResourceEnabled(optResourceEnabled));
  assertSame(options,options.setServers(new ArrayList<>(servers)));
  assertSame(options,options.setCacheMinTimeToLive(minTTL));
  assertSame(options,options.setCacheMaxTimeToLive(maxTTL));
  assertSame(options,options.setCacheNegativeTimeToLive(negativeTTL));
  assertSame(options,options.setQueryTimeout(queryTimeout));
  assertSame(options,options.setMaxQueries(maxQueries));
  assertSame(options,options.setRdFlag(rdFlag));
  assertEquals(optResourceEnabled,options.isOptResourceEnabled());
  assertEquals(servers,options.getServers());
  assertEquals(minTTL,options.getCacheMinTimeToLive());
  assertEquals(maxTTL,options.getCacheMaxTimeToLive());
  assertEquals(negativeTTL,options.getCacheNegativeTimeToLive());
  assertEquals(queryTimeout,options.getQueryTimeout());
  assertEquals(maxQueries,options.getMaxQueries());
  assertEquals(rdFlag,options.getRdFlag());
  HostnameResolverOptions copy=new HostnameResolverOptions(options);
  HostnameResolverOptions jsonCopy=new HostnameResolverOptions(options.toJson());
  options.setOptResourceEnabled(HostnameResolverOptions.DEFAULT_OPT_RESOURCE_ENABLED);
  options.getServers().clear();
  options.setCacheMinTimeToLive(HostnameResolverOptions.DEFAULT_CACHE_MIN_TIME_TO_LIVE);
  options.setCacheMaxTimeToLive(HostnameResolverOptions.DEFAULT_CACHE_MAX_TIME_TO_LIVE);
  options.setCacheNegativeTimeToLive(HostnameResolverOptions.DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE);
  options.setQueryTimeout(HostnameResolverOptions.DEFAULT_QUERY_TIMEOUT);
  options.setMaxQueries(HostnameResolverOptions.DEFAULT_MAX_QUERIES);
  options.setRdFlag(HostnameResolverOptions.DEFAULT_RD_FLAG);
  assertEquals(optResourceEnabled,copy.isOptResourceEnabled());
  assertEquals(servers,copy.getServers());
  assertEquals(minTTL,copy.getCacheMinTimeToLive());
  assertEquals(maxTTL,copy.getCacheMaxTimeToLive());
  assertEquals(negativeTTL,copy.getCacheNegativeTimeToLive());
  assertEquals(queryTimeout,copy.getQueryTimeout());
  assertEquals(maxQueries,copy.getMaxQueries());
  assertEquals(rdFlag,copy.getRdFlag());
  assertEquals(optResourceEnabled,jsonCopy.isOptResourceEnabled());
  assertEquals(servers,jsonCopy.getServers());
  assertEquals(minTTL,jsonCopy.getCacheMinTimeToLive());
  assertEquals(maxTTL,jsonCopy.getCacheMaxTimeToLive());
  assertEquals(negativeTTL,jsonCopy.getCacheNegativeTimeToLive());
  assertEquals(queryTimeout,jsonCopy.getQueryTimeout());
  assertEquals(maxQueries,jsonCopy.getMaxQueries());
  assertEquals(rdFlag,jsonCopy.getRdFlag());
}
