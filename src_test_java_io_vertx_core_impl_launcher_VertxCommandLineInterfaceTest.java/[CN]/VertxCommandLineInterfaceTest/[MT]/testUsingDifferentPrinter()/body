{
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintStream stream=new PrintStream(baos);
  itf=new VertxCommandLauncher(){
    @Override public PrintStream getPrintStream(){
      return stream;
    }
  }
;
  itf.execute("complex","-option1=vertx","-o2","this is arg 1","25");
  assertThat(baos.toString()).contains("Option 1 : vertx").contains("Option 2 : true").contains("Arg 1 : this is arg 1").contains("Arg 2 : 25");
  baos.reset();
  itf=new VertxCommandLauncher(){
    @Override public PrintStream getPrintStream(){
      return stream;
    }
  }
;
  itf.execute("complex","-option1=vertx","this is arg 1");
  assertThat(baos.toString()).contains("Option 1 : vertx").contains("Option 2 : false").contains("Arg 1 : this is arg 1").contains("Arg 2 : 0");
  baos.reset();
  itf=new VertxCommandLauncher(){
    @Override public PrintStream getPrintStream(){
      return stream;
    }
  }
;
  itf.execute("complex","-option1=vertx","this is arg 1","24","xxx","yyy");
  assertThat(baos.toString()).contains("Option 1 : vertx").contains("Option 2 : false").contains("Arg 1 : this is arg 1").contains("Arg 2 : 24").contains("xxx","yyy");
  baos.reset();
  itf=new VertxCommandLauncher(){
    @Override public PrintStream getPrintStream(){
      return stream;
    }
  }
;
  itf.execute("complex","this is arg 1","24");
  assertThat(baos.toString()).doesNotContain("Option 1 : vertx").doesNotContain("Arg 1 : this is arg 1").contains("Usage").contains("The option","is required");
  baos.reset();
  itf=new VertxCommandLauncher(){
    @Override public PrintStream getPrintStream(){
      return stream;
    }
  }
;
  itf.execute("complex","-option1=vertx");
  assertThat(baos.toString()).doesNotContain("Option 1 : vertx").contains("Usage").contains("The argument 'arg1' is required");
}
