{
  final Object body=message.getValue("body");
  final String replyAddress=message.getString("replyAddress");
  if (replyAddress != null && replyAddress.length() > 36) {
    log.error("Will not send message, reply address is > 36 chars");
    return;
  }
  final boolean debug=log.isDebugEnabled();
  if (debug) {
    log.debug("Received msg from client in bridge. address:" + address + " message:"+ body);
  }
  Match curMatch=checkMatches(true,address,body);
  if (curMatch.doesMatch) {
    if (curMatch.requiresAuth) {
      final String sessionID=message.getString("sessionID");
      if (sessionID != null) {
        authorise(message,sessionID,new AsyncResultHandler<Boolean>(){
          public void handle(          AsyncResult<Boolean> res){
            if (res.succeeded()) {
              if (res.result()) {
                cacheAuthorisation(sessionID,sock);
                checkAndSend(send,address,body,sock,replyAddress);
              }
 else {
                if (debug) {
                  log.debug("Inbound message for address " + address + " rejected because sessionID is not authorised");
                }
              }
            }
 else {
              log.error("Error in performing authorisation",res.cause());
            }
          }
        }
);
      }
 else {
        if (debug) {
          log.debug("Inbound message for address " + address + " rejected because it requires auth and sessionID is missing");
        }
      }
    }
 else {
      checkAndSend(send,address,body,sock,replyAddress);
    }
  }
 else {
    if (debug) {
      log.debug("Inbound message for address " + address + " rejected because there is no match");
    }
  }
}
