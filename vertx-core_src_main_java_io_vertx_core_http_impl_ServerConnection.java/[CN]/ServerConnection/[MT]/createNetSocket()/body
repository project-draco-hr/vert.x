{
  NetSocketImpl socket=new NetSocketImpl(vertx,channel,context,server.getSslHelper(),false);
  Map<Channel,NetSocketImpl> connectionMap=new HashMap<Channel,NetSocketImpl>(1);
  connectionMap.put(channel,socket);
  endReadAndFlush();
  ChannelPipeline pipeline=channel.pipeline();
  ChannelHandler compressor=pipeline.get(HttpChunkContentCompressor.class);
  if (compressor != null) {
    pipeline.remove(compressor);
  }
  pipeline.remove("httpDecoder");
  if (pipeline.get("chunkedWriter") != null) {
    pipeline.remove("chunkedWriter");
  }
  channel.pipeline().replace("handler","handler",new VertxNetHandler(vertx,connectionMap){
    @Override public void exceptionCaught(    ChannelHandlerContext chctx,    Throwable t) throws Exception {
      server.removeChannel(channel);
      super.exceptionCaught(chctx,t);
    }
    @Override public void channelInactive(    ChannelHandlerContext chctx) throws Exception {
      server.removeChannel(channel);
      super.channelInactive(chctx);
    }
    @Override public void channelRead(    ChannelHandlerContext chctx,    Object msg) throws Exception {
      if (msg instanceof HttpContent) {
        ReferenceCountUtil.release(msg);
        return;
      }
      super.channelRead(chctx,msg);
    }
  }
);
  if (lastWriteFuture == null) {
    channel.pipeline().remove("httpEncoder");
  }
 else {
    lastWriteFuture.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        channel.pipeline().remove("httpEncoder");
      }
    }
);
  }
  return socket;
}
