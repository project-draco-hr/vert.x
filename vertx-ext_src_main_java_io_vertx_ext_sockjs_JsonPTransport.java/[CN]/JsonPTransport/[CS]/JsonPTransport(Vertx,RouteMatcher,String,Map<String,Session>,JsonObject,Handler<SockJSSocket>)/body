{
  super(vertx,sessions,config);
  String jsonpRE=basePath + COMMON_PATH_ELEMENT_RE + "jsonp";
  rm.getWithRegEx(jsonpRE,new Handler<HttpServerRequest>(){
    public void handle(    final HttpServerRequest req){
      if (log.isTraceEnabled())       log.trace("JsonP, get: " + req.uri());
      String callback=req.params().get("callback");
      if (callback == null) {
        callback=req.params().get("c");
        if (callback == null) {
          req.response().setStatusCode(500);
          req.response().writeStringAndEnd("\"callback\" parameter required\n");
          return;
        }
      }
      String sessionID=req.params().get("param0");
      Session session=getSession(config.getLong("session_timeout"),config.getLong("heartbeat_period"),sessionID,sockHandler);
      session.setInfo(req.localAddress(),req.remoteAddress(),req.uri(),req.headers());
      session.register(new JsonPListener(req,session,callback));
    }
  }
);
  String jsonpSendRE=basePath + COMMON_PATH_ELEMENT_RE + "jsonp_send";
  rm.postWithRegEx(jsonpSendRE,new Handler<HttpServerRequest>(){
    public void handle(    final HttpServerRequest req){
      if (log.isTraceEnabled())       log.trace("JsonP, post: " + req.uri());
      String sessionID=req.params().get("param0");
      final Session session=sessions.get(sessionID);
      if (session != null && !session.isClosed()) {
        handleSend(req,session);
      }
 else {
        req.response().setStatusCode(404);
        setJSESSIONID(config,req);
        req.response().end();
      }
    }
  }
);
}
