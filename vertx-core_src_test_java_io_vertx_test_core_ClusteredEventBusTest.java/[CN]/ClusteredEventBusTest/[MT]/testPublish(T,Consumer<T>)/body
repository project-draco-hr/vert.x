{
  int numNodes=3;
  startNodes(numNodes);
  registerCodecs();
  AtomicInteger count=new AtomicInteger();
class MyHandler implements Handler<Message<T>> {
    @Override public void handle(    Message<T> msg){
      if (consumer == null) {
        assertEquals(val,msg.body());
      }
 else {
        consumer.accept(msg.body());
      }
      if (count.incrementAndGet() == numNodes - 1) {
        testComplete();
      }
    }
  }
  AtomicInteger registerCount=new AtomicInteger(0);
class MyRegisterHandler implements Handler<AsyncResult<Void>> {
    @Override public void handle(    AsyncResult<Void> ar){
      assertTrue(ar.succeeded());
      if (registerCount.incrementAndGet() == 2) {
        vertices[0].eventBus().publish(ADDRESS1,(T)val);
      }
    }
  }
  Registration reg=vertices[2].eventBus().registerHandler(ADDRESS1,new MyHandler());
  reg.completionHandler(new MyRegisterHandler());
  reg=vertices[1].eventBus().registerHandler(ADDRESS1,new MyHandler());
  reg.completionHandler(new MyRegisterHandler());
  vertices[0].eventBus().publish(ADDRESS1,(T)val);
  await();
}
