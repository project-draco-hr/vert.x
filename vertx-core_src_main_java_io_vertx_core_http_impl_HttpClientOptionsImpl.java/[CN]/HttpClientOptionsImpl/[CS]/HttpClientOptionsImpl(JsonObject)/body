{
  this.sendBufferSize=json.getInteger("sendBufferSize",DEFAULT_SENDBUFFERSIZE);
  this.receiveBufferSize=json.getInteger("receiveBufferSize",DEFAULT_RECEIVEBUFFERSIZE);
  this.reuseAddress=json.getBoolean("reuseAddress",DEFAULT_REUSEADDRESS);
  this.trafficClass=json.getInteger("trafficClass",DEFAULT_TRAFFICCLASS);
  this.tcpNoDelay=json.getBoolean("tcpNoDelay",DEFAULT_TCPNODELAY);
  this.tcpKeepAlive=json.getBoolean("tcpKeepAlive",DEFAULT_TCPKEEPALIVE);
  this.soLinger=json.getInteger("soLinger",DEFAULT_SOLINGER);
  this.usePooledBuffers=json.getBoolean("usePooledBuffers",false);
  this.idleTimeout=json.getInteger("idleTimeout",0);
  this.ssl=json.getBoolean("ssl",false);
  JsonObject keyStoreJson=json.getObject("keyStoreOptions");
  if (keyStoreJson != null) {
    String type=keyStoreJson.getString("type",null);
switch (type != null ? type.toLowerCase() : "jks") {
case "jks":
      keyStore=JKSOptions.optionsFromJson(keyStoreJson);
    break;
case "pkcs12":
  keyStore=PKCS12Options.optionsFromJson(keyStoreJson);
break;
case "keycert":
keyStore=KeyCertOptions.optionsFromJson(keyStoreJson);
break;
default :
throw new IllegalArgumentException("Invalid key store type: " + type);
}
}
JsonObject trustStoreJson=json.getObject("trustStoreOptions");
if (trustStoreJson != null) {
String type=trustStoreJson.getString("type",null);
switch (type != null ? type.toLowerCase() : "jks") {
case "jks":
trustStore=JKSOptions.optionsFromJson(trustStoreJson);
break;
case "pkcs12":
trustStore=PKCS12Options.optionsFromJson(trustStoreJson);
break;
case "ca":
trustStore=CaOptions.optionsFromJson(trustStoreJson);
break;
default :
throw new IllegalArgumentException("Invalid trust store type: " + type);
}
}
JsonArray arr=json.getArray("enabledCipherSuites");
this.enabledCipherSuites=arr == null ? null : new HashSet<String>(arr.toList());
this.connectTimeout=json.getInteger("connectTimeout",DEFAULT_CONNECTTIMEOUT);
this.trustAll=json.getBoolean("trustAll",false);
arr=json.getArray("crlPaths");
this.crlPaths=arr == null ? new ArrayList<>() : new ArrayList<String>(arr.toList());
this.verifyHost=json.getBoolean("verifyHost",true);
this.maxPoolSize=json.getInteger("maxPoolSize",DEFAULT_MAXPOOLSIZE);
this.keepAlive=json.getBoolean("keepAlive",DEFAULT_KEEPALIVE);
this.pipelining=json.getBoolean("pipelining",false);
this.tryUseCompression=json.getBoolean("tryUseCompression",false);
}
