{
  Set<Object> set=sharedData.getSet("foo");
  double d=new Random().nextDouble();
  set.add(d);
  assertEquals(d,set.iterator().next());
  set.clear();
  float f=new Random().nextFloat();
  set.add(f);
  assertEquals(f,set.iterator().next());
  set.clear();
  byte b=(byte)new Random().nextInt();
  set.add(b);
  assertEquals(b,set.iterator().next());
  set.clear();
  short s=(short)new Random().nextInt();
  set.add(s);
  assertEquals(s,set.iterator().next());
  set.clear();
  int i=new Random().nextInt();
  set.add(i);
  assertEquals(i,set.iterator().next());
  set.clear();
  long l=new Random().nextLong();
  set.add(l);
  assertEquals(l,set.iterator().next());
  set.clear();
  set.add(true);
  assertTrue((Boolean)set.iterator().next());
  set.clear();
  set.add(false);
  assertFalse((Boolean)set.iterator().next());
  set.clear();
  char c=(char)new Random().nextLong();
  set.add(c);
  assertEquals(c,set.iterator().next());
  set.clear();
  Buffer buff=org.vertx.java.testframework.TestUtils.generateRandomBuffer(100);
  set.add(buff);
  Buffer got1=(Buffer)set.iterator().next();
  assertTrue(got1 != buff);
  assertEquals(buff,set.iterator().next());
  Buffer got2=(Buffer)set.iterator().next();
  assertTrue(got1 != got2);
  assertTrue(got2 != buff);
  assertEquals(buff,set.iterator().next());
  set.clear();
  byte[] bytes=org.vertx.java.testframework.TestUtils.generateRandomByteArray(100);
  set.add(bytes);
  byte[] bgot1=(byte[])set.iterator().next();
  assertTrue(bgot1 != bytes);
  assertTrue(org.vertx.java.testframework.TestUtils.byteArraysEqual(bytes,bgot1));
  byte[] bgot2=(byte[])set.iterator().next();
  assertTrue(bgot2 != bytes);
  assertTrue(bgot1 != bgot2);
  assertTrue(org.vertx.java.testframework.TestUtils.byteArraysEqual(bytes,bgot2));
  set.clear();
  try {
    set.add(new SomeOtherClass());
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
}
