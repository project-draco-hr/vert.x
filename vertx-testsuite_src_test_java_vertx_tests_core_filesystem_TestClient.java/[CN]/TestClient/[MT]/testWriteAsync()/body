{
  final String fileName="some-file.dat";
  final int chunkSize=1000;
  final int chunks=10;
  byte[] content=TestUtils.generateRandomByteArray(chunkSize * chunks);
  final Buffer buff=new Buffer(content);
  vertx.fileSystem().open(TEST_DIR + pathSep + fileName,null,false,true,true,true,new AsyncResultHandler<AsyncFile>(){
    int count;
    public void handle(    final AsyncResult<AsyncFile> arr){
      tu.checkThread();
      if (arr.succeeded()) {
        for (int i=0; i < chunks; i++) {
          Buffer chunk=buff.getBuffer(i * chunkSize,(i + 1) * chunkSize);
          tu.azzert(chunk.length() == chunkSize);
          arr.result().write(chunk,i * chunkSize,new AsyncResultHandler<Void>(){
            public void handle(            AsyncResult<Void> ar){
              if (ar.succeeded()) {
                if (++count == chunks) {
                  arr.result().close(new AsyncResultHandler<Void>(){
                    @Override public void handle(                    AsyncResult<Void> ar){
                      tu.checkThread();
                      if (ar.failed()) {
                        tu.exception(ar.cause(),"failed to close");
                      }
 else {
                        tu.azzert(fileExists(fileName));
                        byte[] readBytes;
                        try {
                          readBytes=Files.readAllBytes(Paths.get(TEST_DIR + pathSep + fileName));
                        }
 catch (                        IOException e) {
                          tu.exception(e,"Failed to read file");
                          return;
                        }
                        Buffer read=new Buffer(readBytes);
                        tu.azzert(TestUtils.buffersEqual(buff,read));
                        tu.testComplete();
                      }
                    }
                  }
);
                }
              }
 else {
                tu.exception(ar.cause(),"Failed to write");
              }
            }
          }
);
        }
      }
 else {
        tu.exception(arr.cause(),"Failed to open");
      }
    }
  }
);
}
