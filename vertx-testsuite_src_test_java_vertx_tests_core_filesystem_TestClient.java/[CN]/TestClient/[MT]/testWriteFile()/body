{
  final byte[] content=TestUtils.generateRandomByteArray(1000);
  final Buffer buff=new Buffer(content);
  final String fileName="some-file.dat";
  AsyncResultHandler<Void> handler=new AsyncResultHandler<Void>(){
    public void handle(    AsyncResult<Void> ar){
      tu.checkThread();
      if (ar.failed()) {
        tu.exception(ar.cause(),"failed to write");
      }
 else {
        tu.azzert(fileExists(fileName));
        tu.azzert(fileLength(fileName) == content.length);
        byte[] readBytes;
        try {
          readBytes=Files.readAllBytes(Paths.get(TEST_DIR + pathSep + fileName));
        }
 catch (        IOException e) {
          tu.exception(e,"failed to read");
          return;
        }
        tu.azzert(TestUtils.buffersEqual(buff,new Buffer(readBytes)));
        tu.testComplete();
      }
    }
  }
;
  vertx.fileSystem().writeFile(TEST_DIR + pathSep + fileName,buff,handler);
}
