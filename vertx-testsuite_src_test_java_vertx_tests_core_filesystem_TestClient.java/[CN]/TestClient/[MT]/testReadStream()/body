{
  final String fileName="some-file.dat";
  final int chunkSize=1000;
  final int chunks=10;
  final byte[] content=TestUtils.generateRandomByteArray(chunkSize * chunks);
  createFile(fileName,content);
  vertx.fileSystem().open(TEST_DIR + pathSep + fileName,null,true,false,false,new AsyncResultHandler<AsyncFile>(){
    public void handle(    final AsyncResult<AsyncFile> ar){
      tu.checkThread();
      if (ar.succeeded()) {
        ReadStream rs=ar.result();
        final Buffer buff=new Buffer();
        rs.dataHandler(new Handler<Buffer>(){
          public void handle(          Buffer data){
            tu.checkThread();
            buff.appendBuffer(data);
          }
        }
);
        rs.exceptionHandler(new Handler<Throwable>(){
          public void handle(          Throwable t){
            tu.checkThread();
            tu.exception(t,"caught exception");
          }
        }
);
        rs.endHandler(new VoidHandler(){
          public void handle(){
            ar.result().close(new AsyncResultHandler<Void>(){
              @Override public void handle(              AsyncResult<Void> ar){
                tu.checkThread();
                if (ar.failed()) {
                  tu.exception(ar.cause(),"failed to close");
                }
 else {
                  tu.checkThread();
                  tu.azzert(TestUtils.buffersEqual(buff,new Buffer(content)));
                  tu.testComplete();
                }
              }
            }
);
          }
        }
);
      }
 else {
        tu.exception(ar.cause(),"failed to open");
      }
    }
  }
);
}
