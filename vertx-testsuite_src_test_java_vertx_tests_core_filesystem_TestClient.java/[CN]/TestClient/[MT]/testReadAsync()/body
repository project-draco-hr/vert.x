{
  final String fileName="some-file.dat";
  final int chunkSize=1000;
  final int chunks=10;
  byte[] content=TestUtils.generateRandomByteArray(chunkSize * chunks);
  final Buffer expected=new Buffer(content);
  createFile(fileName,content);
  vertx.fileSystem().open(TEST_DIR + pathSep + fileName,null,true,false,false,new AsyncResultHandler<AsyncFile>(){
    int reads;
    public void handle(    final AsyncResult<AsyncFile> arr){
      tu.checkThread();
      if (arr.succeeded()) {
        final Buffer buff=new Buffer(chunks * chunkSize);
        for (int i=0; i < chunks; i++) {
          arr.result().read(buff,i * chunkSize,i * chunkSize,chunkSize,new AsyncResultHandler<Buffer>(){
            public void handle(            final AsyncResult<Buffer> arb){
              if (arb.succeeded()) {
                if (++reads == chunks) {
                  arr.result().close(new AsyncResultHandler<Void>(){
                    @Override public void handle(                    AsyncResult<Void> ar){
                      tu.checkThread();
                      if (ar.failed()) {
                        tu.exception(ar.cause(),"failed to close");
                      }
 else {
                        tu.azzert(TestUtils.buffersEqual(expected,buff));
                        tu.azzert(buff == arb.result());
                        tu.testComplete();
                      }
                    }
                  }
);
                }
              }
 else {
                tu.exception(arb.cause(),"failed to read");
              }
            }
          }
);
        }
      }
 else {
        tu.exception(arr.cause(),"failed to open file");
      }
    }
  }
);
}
