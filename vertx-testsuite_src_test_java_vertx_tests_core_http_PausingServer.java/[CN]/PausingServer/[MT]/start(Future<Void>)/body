{
  tu=new TestUtils(vertx);
  server=vertx.createHttpServer().requestHandler(new Handler<HttpServerRequest>(){
    public void handle(    final HttpServerRequest req){
      tu.checkThread();
      req.response().setChunked(true);
      req.pause();
      final Handler<Message<Buffer>> resumeHandler=new Handler<Message<Buffer>>(){
        public void handle(        Message message){
          tu.checkThread();
          req.resume();
        }
      }
;
      vertx.eventBus().registerHandler("server_resume",resumeHandler);
      req.endHandler(new VoidHandler(){
        public void handle(){
          tu.checkThread();
          vertx.eventBus().unregisterHandler("server_resume",resumeHandler);
        }
      }
);
      req.dataHandler(new Handler<Buffer>(){
        public void handle(        Buffer buffer){
          tu.checkThread();
          req.response().write(buffer);
        }
      }
);
    }
  }
);
  server.listen(8080,new AsyncResultHandler<HttpServer>(){
    @Override public void handle(    AsyncResult<HttpServer> ar){
      tu.azzert(ar.succeeded());
      tu.appReady();
      startResult.setResult(null);
    }
  }
);
}
