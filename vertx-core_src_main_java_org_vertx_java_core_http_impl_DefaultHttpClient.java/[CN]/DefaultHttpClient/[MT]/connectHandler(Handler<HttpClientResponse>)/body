{
  return new Handler<HttpClientResponse>(){
    @Override public void handle(    final HttpClientResponse event){
      HttpClientResponse response;
      if (event.statusCode() == 200) {
        final NetSocket socket=event.netSocket();
        socket.pause();
        response=new HttpClientResponse(){
          private boolean resumed;
          @Override public int statusCode(){
            return event.statusCode();
          }
          @Override public String statusMessage(){
            return event.statusMessage();
          }
          @Override public MultiMap headers(){
            return event.headers();
          }
          @Override public MultiMap trailers(){
            return event.trailers();
          }
          @Override public List<String> cookies(){
            return event.cookies();
          }
          @Override public HttpClientResponse bodyHandler(          Handler<Buffer> bodyHandler){
            event.bodyHandler(bodyHandler);
            return this;
          }
          @Override public NetSocket netSocket(){
            if (!resumed) {
              resumed=true;
              vertx.getContext().execute(new Runnable(){
                @Override public void run(){
                  socket.resume();
                }
              }
);
            }
            return socket;
          }
          @Override public HttpClientResponse endHandler(          Handler<Void> endHandler){
            event.endHandler(endHandler);
            return this;
          }
          @Override public HttpClientResponse dataHandler(          Handler<Buffer> handler){
            event.dataHandler(handler);
            return this;
          }
          @Override public HttpClientResponse pause(){
            event.pause();
            return this;
          }
          @Override public HttpClientResponse resume(){
            event.resume();
            return this;
          }
          @Override public HttpClientResponse exceptionHandler(          Handler<Throwable> handler){
            event.exceptionHandler(handler);
            return this;
          }
        }
;
      }
 else {
        response=event;
      }
      responseHandler.handle(response);
    }
  }
;
}
