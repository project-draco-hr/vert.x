{
  if (bootstrap == null) {
    VertxEventLoopGroup pool=new VertxEventLoopGroup();
    pool.addWorker(actualCtx.getEventLoop());
    bootstrap=new Bootstrap();
    bootstrap.group(pool);
    bootstrap.channel(NioSocketChannel.class);
    tcpHelper.checkSSL(vertx);
    bootstrap.handler(new ChannelInitializer<Channel>(){
      @Override protected void initChannel(      Channel ch) throws Exception {
        ChannelPipeline pipeline=ch.pipeline();
        pipeline.addLast("exceptionDispatcher",EXCEPTION_DISPATCH_HANDLER);
        if (tcpHelper.isSSL()) {
          SSLEngine engine=tcpHelper.getSSLContext().createSSLEngine(host,port);
          if (tcpHelper.isVerifyHost()) {
            SSLParameters sslParameters=engine.getSSLParameters();
            sslParameters.setEndpointIdentificationAlgorithm("HTTPS");
            engine.setSSLParameters(sslParameters);
          }
          engine.setUseClientMode(true);
          pipeline.addLast("ssl",new SslHandler(engine));
        }
        pipeline.addLast("codec",new HttpClientCodec(4096,8192,8192,false,false));
        if (tryUseCompression) {
          pipeline.addLast("inflater",new HttpContentDecompressor());
        }
        pipeline.addLast("handler",new ClientHandler());
      }
    }
);
  }
  tcpHelper.applyConnectionOptions(bootstrap);
  ChannelFuture future=bootstrap.connect(new InetSocketAddress(host,port));
  future.addListener(new ChannelFutureListener(){
    public void operationComplete(    ChannelFuture channelFuture) throws Exception {
      final Channel ch=channelFuture.channel();
      if (channelFuture.isSuccess()) {
        if (tcpHelper.isSSL()) {
          SslHandler sslHandler=ch.pipeline().get(SslHandler.class);
          Future<Channel> fut=sslHandler.handshakeFuture();
          fut.addListener(new GenericFutureListener<Future<Channel>>(){
            @Override public void operationComplete(            Future<Channel> future) throws Exception {
              if (future.isSuccess()) {
                connected(ch,connectHandler);
              }
 else {
                failed(ch,connectErrorHandler,new SSLHandshakeException("Failed to create SSL connection"));
              }
            }
          }
);
        }
 else {
          connected(ch,connectHandler);
        }
      }
 else {
        failed(ch,connectErrorHandler,channelFuture.cause());
      }
    }
  }
);
}
