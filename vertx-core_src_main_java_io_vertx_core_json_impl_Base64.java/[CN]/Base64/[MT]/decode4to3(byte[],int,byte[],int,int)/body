{
  byte[] DECODABET=Base64.getDecodabet(options);
  if (source[srcOffset + 2] == Base64.EQUALS_SIGN) {
    int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12;
    destination[destOffset]=(byte)(outBuff >>> 16);
    return 1;
  }
 else   if (source[srcOffset + 3] == Base64.EQUALS_SIGN) {
    int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 | (DECODABET[source[srcOffset + 2]] & 0xFF) << 6;
    destination[destOffset]=(byte)(outBuff >>> 16);
    destination[destOffset + 1]=(byte)(outBuff >>> 8);
    return 2;
  }
 else {
    try {
      int outBuff=(DECODABET[source[srcOffset]] & 0xFF) << 18 | (DECODABET[source[srcOffset + 1]] & 0xFF) << 12 | (DECODABET[source[srcOffset + 2]] & 0xFF) << 6 | DECODABET[source[srcOffset + 3]] & 0xFF;
      destination[destOffset]=(byte)(outBuff >> 16);
      destination[destOffset + 1]=(byte)(outBuff >> 8);
      destination[destOffset + 2]=(byte)outBuff;
      return 3;
    }
 catch (    Exception e) {
      System.out.println("" + source[srcOffset] + ": "+ DECODABET[source[srcOffset]]);
      System.out.println("" + source[srcOffset + 1] + ": "+ DECODABET[source[srcOffset + 1]]);
      System.out.println("" + source[srcOffset + 2] + ": "+ DECODABET[source[srcOffset + 2]]);
      System.out.println("" + source[srcOffset + 3] + ": "+ DECODABET[source[srcOffset + 3]]);
      return -1;
    }
  }
}
