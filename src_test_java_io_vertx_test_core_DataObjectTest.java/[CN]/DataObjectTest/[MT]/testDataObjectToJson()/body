{
  String stringValue=TestUtils.randomAlphaString(20);
  boolean booleanValue=TestUtils.randomBoolean();
  byte byteValue=TestUtils.randomByte();
  short shortValue=TestUtils.randomShort();
  int intValue=TestUtils.randomInt();
  long longValue=TestUtils.randomLong();
  float floatValue=TestUtils.randomFloat();
  double doubleValue=TestUtils.randomDouble();
  char charValue=TestUtils.randomChar();
  Boolean boxedBooleanValue=TestUtils.randomBoolean();
  Byte boxedByteValue=TestUtils.randomByte();
  Short boxedShortValue=TestUtils.randomShort();
  Integer boxedIntValue=TestUtils.randomInt();
  Long boxedLongValue=TestUtils.randomLong();
  Float boxedFloatValue=TestUtils.randomFloat();
  Double boxedDoubleValue=TestUtils.randomDouble();
  Character boxedCharValue=TestUtils.randomChar();
  AggregatedDataObject aggregatedDataObject=new AggregatedDataObject().setValue(TestUtils.randomAlphaString(20));
  Buffer buffer=TestUtils.randomBuffer(20);
  JsonObject jsonObject=new JsonObject().put("wibble",TestUtils.randomAlphaString(20));
  JsonArray jsonArray=new JsonArray().add(TestUtils.randomAlphaString(20));
  HttpMethod httpMethod=HttpMethod.values()[TestUtils.randomPositiveInt() % HttpMethod.values().length];
  TestDataObject obj=new TestDataObject();
  obj.setStringValue(stringValue);
  obj.setBooleanValue(booleanValue);
  obj.setByteValue(byteValue);
  obj.setShortValue(shortValue);
  obj.setIntValue(intValue);
  obj.setLongValue(longValue);
  obj.setFloatValue(floatValue);
  obj.setDoubleValue(doubleValue);
  obj.setCharValue(charValue);
  obj.setBoxedBooleanValue(boxedBooleanValue);
  obj.setBoxedByteValue(boxedByteValue);
  obj.setBoxedShortValue(boxedShortValue);
  obj.setBoxedIntValue(boxedIntValue);
  obj.setBoxedLongValue(boxedLongValue);
  obj.setBoxedFloatValue(boxedFloatValue);
  obj.setBoxedDoubleValue(boxedDoubleValue);
  obj.setBoxedCharValue(boxedCharValue);
  obj.setAggregatedDataObject(aggregatedDataObject);
  obj.setBuffer(buffer);
  obj.setJsonObject(jsonObject);
  obj.setJsonArray(jsonArray);
  obj.setHttpMethod(httpMethod);
  obj.setStringValues(Collections.singletonList(stringValue));
  obj.setBoxedBooleanValues(Collections.singletonList(boxedBooleanValue));
  obj.setBoxedByteValues(Collections.singletonList(boxedByteValue));
  obj.setBoxedShortValues(Collections.singletonList(boxedShortValue));
  obj.setBoxedIntValues(Collections.singletonList(boxedIntValue));
  obj.setBoxedLongValues(Collections.singletonList(boxedLongValue));
  obj.setBoxedFloatValues(Collections.singletonList(boxedFloatValue));
  obj.setBoxedDoubleValues(Collections.singletonList(boxedDoubleValue));
  obj.setBoxedCharValues(Collections.singletonList(boxedCharValue));
  obj.setAggregatedDataObjects(Collections.singletonList(aggregatedDataObject));
  obj.setBuffers(Collections.singletonList(buffer));
  obj.setJsonObjects(Collections.singletonList(jsonObject));
  obj.setJsonArrays(Collections.singletonList(jsonArray));
  obj.setHttpMethods(Collections.singletonList(httpMethod));
  JsonObject json=new JsonObject();
  TestDataObjectHelper.toJson(obj,json);
  json=new JsonObject(json.encode());
  assertEquals(stringValue,json.getString("stringValue"));
  assertEquals(booleanValue,json.getBoolean("booleanValue"));
  assertEquals((int)byteValue,(int)json.getInteger("byteValue"));
  assertEquals((int)shortValue,(int)json.getInteger("shortValue"));
  assertEquals(intValue,(int)json.getInteger("intValue"));
  assertEquals(longValue,(long)json.getLong("longValue"));
  assertEquals(floatValue,json.getFloat("floatValue"),0.001);
  assertEquals(doubleValue,(double)json.getFloat("doubleValue"),0.001);
  assertEquals(Character.toString(charValue),json.getString("charValue"));
  assertEquals(boxedBooleanValue,json.getBoolean("boxedBooleanValue"));
  assertEquals((int)boxedByteValue,(int)json.getInteger("boxedByteValue"));
  assertEquals((int)boxedShortValue,(int)json.getInteger("boxedShortValue"));
  assertEquals(boxedIntValue,json.getInteger("boxedIntValue"));
  assertEquals(boxedLongValue,json.getLong("boxedLongValue"));
  assertEquals(boxedFloatValue,json.getFloat("boxedFloatValue"),0.001);
  assertEquals(boxedDoubleValue,(double)json.getFloat("boxedDoubleValue"),0.001);
  assertEquals(Character.toString(boxedCharValue),json.getString("boxedCharValue"));
  assertEquals(aggregatedDataObject.toJson(),json.getJsonObject("aggregatedDataObject"));
  assertEquals(buffer,Buffer.buffer(json.getBinary("buffer")));
  assertEquals(jsonObject,json.getJsonObject("jsonObject"));
  assertEquals(jsonArray,json.getJsonArray("jsonArray"));
  assertEquals(httpMethod.name(),json.getString("httpMethod"));
  assertEquals(new JsonArray().add(stringValue),json.getJsonArray("stringValues"));
  assertEquals(new JsonArray().add(boxedBooleanValue),json.getJsonArray("boxedBooleanValues"));
  assertEquals(new JsonArray().add(boxedByteValue),json.getJsonArray("boxedByteValues"));
  assertEquals(new JsonArray().add(boxedShortValue),json.getJsonArray("boxedShortValues"));
  assertEquals(new JsonArray().add(boxedIntValue),json.getJsonArray("boxedIntValues"));
  assertEquals(new JsonArray().add(boxedLongValue),json.getJsonArray("boxedLongValues"));
  assertEquals(1,json.getJsonArray("boxedFloatValues").size());
  assertEquals(boxedFloatValue,json.getJsonArray("boxedFloatValues").getFloat(0),0.001);
  assertEquals(1,json.getJsonArray("boxedDoubleValues").size());
  assertEquals(boxedDoubleValue,json.getJsonArray("boxedDoubleValues").getDouble(0),0.001);
  assertEquals(new JsonArray().add(Character.toString(boxedCharValue)),json.getJsonArray("boxedCharValues"));
  assertEquals(new JsonArray().add(aggregatedDataObject.toJson()),json.getJsonArray("aggregatedDataObjects"));
  assertEquals(new JsonArray().add(Base64.getEncoder().encodeToString(buffer.getBytes())),json.getJsonArray("buffers"));
  assertEquals(new JsonArray().add(jsonObject),json.getJsonArray("jsonObjects"));
  assertEquals(new JsonArray().add(jsonArray),json.getJsonArray("jsonArrays"));
  assertEquals(new JsonArray().add(httpMethod.name()),json.getJsonArray("httpMethods"));
}
