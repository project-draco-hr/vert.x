{
  String key=TestUtils.randomAlphaString(10);
  String stringValue=TestUtils.randomAlphaString(20);
  boolean booleanValue=TestUtils.randomBoolean();
  byte byteValue=TestUtils.randomByte();
  short shortValue=TestUtils.randomShort();
  int intValue=TestUtils.randomInt();
  long longValue=TestUtils.randomLong();
  float floatValue=TestUtils.randomFloat();
  double doubleValue=TestUtils.randomDouble();
  char charValue=TestUtils.randomChar();
  Boolean boxedBooleanValue=TestUtils.randomBoolean();
  Byte boxedByteValue=TestUtils.randomByte();
  Short boxedShortValue=TestUtils.randomShort();
  Integer boxedIntValue=TestUtils.randomInt();
  Long boxedLongValue=TestUtils.randomLong();
  Float boxedFloatValue=TestUtils.randomFloat();
  Double boxedDoubleValue=TestUtils.randomDouble();
  Character boxedCharValue=TestUtils.randomChar();
  AggregatedDataObject aggregatedDataObject=new AggregatedDataObject().setValue(TestUtils.randomAlphaString(20));
  Buffer buffer=TestUtils.randomBuffer(20);
  JsonObject jsonObject=new JsonObject().put("wibble",TestUtils.randomAlphaString(20));
  JsonArray jsonArray=new JsonArray().add(TestUtils.randomAlphaString(20));
  HttpMethod httpMethod=HttpMethod.values()[TestUtils.randomPositiveInt() % HttpMethod.values().length];
  Map<String,Object> map=new HashMap<>();
  map.put(TestUtils.randomAlphaString(10),TestUtils.randomAlphaString(20));
  map.put(TestUtils.randomAlphaString(10),TestUtils.randomBoolean());
  map.put(TestUtils.randomAlphaString(10),TestUtils.randomInt());
  List<Object> list=new ArrayList<>();
  list.add(TestUtils.randomAlphaString(20));
  list.add(TestUtils.randomBoolean());
  list.add(TestUtils.randomInt());
  JsonObject json=new JsonObject();
  json.put("stringValue",stringValue);
  json.put("booleanValue",booleanValue);
  json.put("byteValue",byteValue);
  json.put("shortValue",shortValue);
  json.put("intValue",intValue);
  json.put("longValue",longValue);
  json.put("floatValue",floatValue);
  json.put("doubleValue",doubleValue);
  json.put("charValue",Character.toString(charValue));
  json.put("boxedBooleanValue",boxedBooleanValue);
  json.put("boxedByteValue",boxedByteValue);
  json.put("boxedShortValue",boxedShortValue);
  json.put("boxedIntValue",boxedIntValue);
  json.put("boxedLongValue",boxedLongValue);
  json.put("boxedFloatValue",boxedFloatValue);
  json.put("boxedDoubleValue",boxedDoubleValue);
  json.put("boxedCharValue",Character.toString(boxedCharValue));
  json.put("aggregatedDataObject",new JsonObject().put("value",aggregatedDataObject.getValue()));
  json.put("buffer",Base64.getEncoder().encodeToString(buffer.getBytes()));
  json.put("jsonObject",jsonObject);
  json.put("jsonArray",jsonArray);
  json.put("httpMethod",httpMethod.toString());
  json.put("stringValues",new JsonArray().add(stringValue));
  json.put("boxedBooleanValues",new JsonArray().add(boxedBooleanValue));
  json.put("boxedByteValues",new JsonArray().add(boxedByteValue));
  json.put("boxedShortValues",new JsonArray().add(boxedShortValue));
  json.put("boxedIntValues",new JsonArray().add(boxedIntValue));
  json.put("boxedLongValues",new JsonArray().add(boxedLongValue));
  json.put("boxedFloatValues",new JsonArray().add(boxedFloatValue));
  json.put("boxedDoubleValues",new JsonArray().add(boxedDoubleValue));
  json.put("boxedCharValues",new JsonArray().add(Character.toString(boxedCharValue)));
  json.put("aggregatedDataObjects",new JsonArray().add(new JsonObject().put("value",aggregatedDataObject.getValue())));
  json.put("buffers",new JsonArray().add(Base64.getEncoder().encodeToString(buffer.getBytes())));
  json.put("jsonObjects",new JsonArray().add(jsonObject));
  json.put("jsonArrays",new JsonArray().add(jsonArray));
  json.put("httpMethods",new JsonArray().add(httpMethod.toString()));
  json.put("objects",new JsonArray().add(list.get(0)).add(list.get(1)).add(list.get(2)));
  json.put("addedStringValues",new JsonArray().add(stringValue));
  json.put("addedBooleanValues",new JsonArray().add(boxedBooleanValue));
  json.put("addedByteValues",new JsonArray().add(boxedByteValue));
  json.put("addedShortValues",new JsonArray().add(boxedShortValue));
  json.put("addedIntValues",new JsonArray().add(boxedIntValue));
  json.put("addedLongValues",new JsonArray().add(boxedLongValue));
  json.put("addedFloatValues",new JsonArray().add(boxedFloatValue));
  json.put("addedDoubleValues",new JsonArray().add(boxedDoubleValue));
  json.put("addedCharValues",new JsonArray().add(Character.toString(boxedCharValue)));
  json.put("addedBoxedBooleanValues",new JsonArray().add(boxedBooleanValue));
  json.put("addedBoxedByteValues",new JsonArray().add(boxedByteValue));
  json.put("addedBoxedShortValues",new JsonArray().add(boxedShortValue));
  json.put("addedBoxedIntValues",new JsonArray().add(boxedIntValue));
  json.put("addedBoxedLongValues",new JsonArray().add(boxedLongValue));
  json.put("addedBoxedFloatValues",new JsonArray().add(boxedFloatValue));
  json.put("addedBoxedDoubleValues",new JsonArray().add(boxedDoubleValue));
  json.put("addedBoxedCharValues",new JsonArray().add(Character.toString(boxedCharValue)));
  json.put("addedAggregatedDataObjects",new JsonArray().add(new JsonObject().put("value",aggregatedDataObject.getValue())));
  json.put("addedBuffers",new JsonArray().add(Base64.getEncoder().encodeToString(buffer.getBytes())));
  json.put("addedJsonObjects",new JsonArray().add(jsonObject));
  json.put("addedJsonArrays",new JsonArray().add(jsonArray));
  json.put("addedHttpMethods",new JsonArray().add(httpMethod.toString()));
  json.put("addedObjects",new JsonArray().add(list.get(0)).add(list.get(1)).add(list.get(2)));
  json.put("stringValueMap",new JsonObject().put(key,stringValue));
  json.put("boxedBooleanValueMap",new JsonObject().put(key,boxedBooleanValue));
  json.put("boxedByteValueMap",new JsonObject().put(key,boxedByteValue));
  json.put("boxedShortValueMap",new JsonObject().put(key,boxedShortValue));
  json.put("boxedIntValueMap",new JsonObject().put(key,boxedIntValue));
  json.put("boxedLongValueMap",new JsonObject().put(key,boxedLongValue));
  json.put("boxedFloatValueMap",new JsonObject().put(key,boxedFloatValue));
  json.put("boxedDoubleValueMap",new JsonObject().put(key,boxedDoubleValue));
  json.put("boxedCharValueMap",new JsonObject().put(key,Character.toString(boxedCharValue)));
  json.put("aggregatedDataObjectMap",new JsonObject().put(key,new JsonObject().put("value",aggregatedDataObject.getValue())));
  json.put("bufferMap",new JsonObject().put(key,Base64.getEncoder().encodeToString(buffer.getBytes())));
  json.put("jsonObjectMap",new JsonObject().put(key,jsonObject));
  json.put("jsonArrayMap",new JsonObject().put(key,jsonArray));
  json.put("httpMethodMap",new JsonObject().put(key,httpMethod.toString()));
  json.put("objectMap",toJson(map));
  TestDataObject obj=new TestDataObject();
  TestDataObjectConverter.fromJson(json,obj);
  assertEquals(stringValue,obj.getStringValue());
  assertEquals(booleanValue,obj.isBooleanValue());
  assertEquals(byteValue,obj.getByteValue());
  assertEquals(shortValue,obj.getShortValue());
  assertEquals(intValue,obj.getIntValue());
  assertEquals(longValue,obj.getLongValue());
  assertEquals(floatValue,obj.getFloatValue(),0);
  assertEquals(doubleValue,obj.getDoubleValue(),0);
  assertEquals(charValue,obj.getCharValue());
  assertEquals(boxedBooleanValue,obj.isBoxedBooleanValue());
  assertEquals(boxedByteValue,obj.getBoxedByteValue());
  assertEquals(boxedShortValue,obj.getBoxedShortValue());
  assertEquals(boxedIntValue,obj.getBoxedIntValue());
  assertEquals(boxedLongValue,obj.getBoxedLongValue());
  assertEquals(boxedFloatValue,obj.getBoxedFloatValue(),0);
  assertEquals(boxedDoubleValue,obj.getBoxedDoubleValue(),0);
  assertEquals(boxedCharValue,obj.getBoxedCharValue());
  assertEquals(aggregatedDataObject,obj.getAggregatedDataObject());
  assertEquals(buffer,obj.getBuffer());
  assertEquals(jsonObject,obj.getJsonObject());
  assertEquals(jsonArray,obj.getJsonArray());
  assertEquals(httpMethod,obj.getHttpMethod());
  assertEquals(Collections.singletonList(stringValue),obj.getStringValues());
  assertEquals(Collections.singletonList(boxedBooleanValue),obj.getBoxedBooleanValues());
  assertEquals(Collections.singletonList(boxedByteValue),obj.getBoxedByteValues());
  assertEquals(Collections.singletonList(boxedShortValue),obj.getBoxedShortValues());
  assertEquals(Collections.singletonList(boxedIntValue),obj.getBoxedIntValues());
  assertEquals(Collections.singletonList(boxedLongValue),obj.getBoxedLongValues());
  assertEquals(Collections.singletonList(boxedFloatValue),obj.getBoxedFloatValues());
  assertEquals(Collections.singletonList(boxedDoubleValue),obj.getBoxedDoubleValues());
  assertEquals(Collections.singletonList(boxedCharValue),obj.getBoxedCharValues());
  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAggregatedDataObjects());
  assertEquals(Collections.singletonList(buffer),obj.getBuffers());
  assertEquals(Collections.singletonList(jsonObject),obj.getJsonObjects());
  assertEquals(Collections.singletonList(jsonArray),obj.getJsonArrays());
  assertEquals(Collections.singletonList(httpMethod),obj.getHttpMethods());
  assertEquals(list,obj.getObjects());
  assertEquals(Collections.singletonList(stringValue),obj.getAddedStringValues());
  assertEquals(Collections.singletonList(boxedBooleanValue),obj.getAddedBooleanValues());
  assertEquals(Collections.singletonList(boxedByteValue),obj.getAddedByteValues());
  assertEquals(Collections.singletonList(boxedShortValue),obj.getAddedShortValues());
  assertEquals(Collections.singletonList(boxedIntValue),obj.getAddedIntValues());
  assertEquals(Collections.singletonList(boxedLongValue),obj.getAddedLongValues());
  assertEquals(Collections.singletonList(boxedFloatValue),obj.getAddedFloatValues());
  assertEquals(Collections.singletonList(boxedDoubleValue),obj.getAddedDoubleValues());
  assertEquals(Collections.singletonList(boxedCharValue),obj.getAddedCharValues());
  assertEquals(Collections.singletonList(boxedBooleanValue),obj.getAddedBoxedBooleanValues());
  assertEquals(Collections.singletonList(boxedByteValue),obj.getAddedBoxedByteValues());
  assertEquals(Collections.singletonList(boxedShortValue),obj.getAddedBoxedShortValues());
  assertEquals(Collections.singletonList(boxedIntValue),obj.getAddedBoxedIntValues());
  assertEquals(Collections.singletonList(boxedLongValue),obj.getAddedBoxedLongValues());
  assertEquals(Collections.singletonList(boxedFloatValue),obj.getAddedBoxedFloatValues());
  assertEquals(Collections.singletonList(boxedDoubleValue),obj.getAddedBoxedDoubleValues());
  assertEquals(Collections.singletonList(boxedCharValue),obj.getAddedBoxedCharValues());
  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAddedAggregatedDataObjects());
  assertEquals(Collections.singletonList(buffer),obj.getAddedBuffers());
  assertEquals(Collections.singletonList(jsonObject),obj.getAddedJsonObjects());
  assertEquals(Collections.singletonList(jsonArray),obj.getAddedJsonArrays());
  assertEquals(Collections.singletonList(httpMethod),obj.getAddedHttpMethods());
  assertEquals(list,obj.getAddedObjects());
  assertEquals(Collections.singletonMap(key,stringValue),obj.getStringValueMap());
  assertEquals(Collections.singletonMap(key,boxedBooleanValue),obj.getBoxedBooleanValueMap());
  assertEquals(Collections.singletonMap(key,boxedByteValue),obj.getBoxedByteValueMap());
  assertEquals(Collections.singletonMap(key,boxedShortValue),obj.getBoxedShortValueMap());
  assertEquals(Collections.singletonMap(key,boxedIntValue),obj.getBoxedIntValueMap());
  assertEquals(Collections.singletonMap(key,boxedLongValue),obj.getBoxedLongValueMap());
  assertEquals(Collections.singletonMap(key,boxedFloatValue),obj.getBoxedFloatValueMap());
  assertEquals(Collections.singletonMap(key,boxedDoubleValue),obj.getBoxedDoubleValueMap());
  assertEquals(Collections.singletonMap(key,boxedCharValue),obj.getBoxedCharValueMap());
  assertEquals(Collections.singletonMap(key,aggregatedDataObject),obj.getAggregatedDataObjectMap());
  assertEquals(Collections.singletonMap(key,buffer),obj.getBufferMap());
  assertEquals(Collections.singletonMap(key,jsonObject),obj.getJsonObjectMap());
  assertEquals(Collections.singletonMap(key,jsonArray),obj.getJsonArrayMap());
  assertEquals(Collections.singletonMap(key,httpMethod),obj.getHttpMethodMap());
  assertEquals(map,obj.getObjectMap());
  json=new JsonObject();
  json.put("aggregatedDataObject",new JsonObject().put("value",aggregatedDataObject.getValue()).getMap());
  json.put("aggregatedDataObjects",new JsonArray().add(new JsonObject().put("value",aggregatedDataObject.getValue()).getMap()));
  json.put("addedAggregatedDataObjects",new JsonArray().add(new JsonObject().put("value",aggregatedDataObject.getValue()).getMap()));
  obj=new TestDataObject();
  TestDataObjectConverter.fromJson(json,obj);
  assertEquals(aggregatedDataObject,obj.getAggregatedDataObject());
  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAggregatedDataObjects());
  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAddedAggregatedDataObjects());
}
