{
  int sendBufferSize=TestUtils.randomPositiveInt();
  int receiverBufferSize=TestUtils.randomPortInt();
  Random rand=new Random();
  boolean reuseAddress=rand.nextBoolean();
  int trafficClass=TestUtils.randomByte() + 127;
  boolean tcpNoDelay=rand.nextBoolean();
  boolean tcpKeepAlive=rand.nextBoolean();
  int soLinger=TestUtils.randomPositiveInt();
  boolean usePooledBuffers=rand.nextBoolean();
  boolean ssl=rand.nextBoolean();
  JKSOptions keyStoreOptions=new JKSOptions();
  String ksPassword=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPassword(ksPassword);
  String ksPath=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPath(ksPath);
  JKSOptions trustStoreOptions=new JKSOptions();
  String tsPassword=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPassword(tsPassword);
  String tsPath=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPath(tsPath);
  String enabledCipher=TestUtils.randomAlphaString(100);
  String crlPath=TestUtils.randomUnicodeString(100);
  int port=1234;
  String host=TestUtils.randomAlphaString(100);
  int acceptBacklog=TestUtils.randomPortInt();
  boolean compressionSupported=rand.nextBoolean();
  int maxWebsocketFrameSize=TestUtils.randomPositiveInt();
  String wsSubProtocol=TestUtils.randomAlphaString(10);
  JsonObject json=new JsonObject();
  json.putNumber("sendBufferSize",sendBufferSize).putNumber("receiveBufferSize",receiverBufferSize).putBoolean("reuseAddress",reuseAddress).putNumber("trafficClass",trafficClass).putBoolean("tcpNoDelay",tcpNoDelay).putBoolean("tcpKeepAlive",tcpKeepAlive).putNumber("soLinger",soLinger).putBoolean("usePooledBuffers",usePooledBuffers).putBoolean("ssl",ssl).putArray("enabledCipherSuites",new JsonArray().addString(enabledCipher)).putArray("crlPaths",new JsonArray().addString(crlPath)).putObject("keyStoreOptions",new JsonObject().putString("type","jks").putString("password",ksPassword).putString("path",ksPath)).putObject("trustStoreOptions",new JsonObject().putString("type","jks").putString("password",tsPassword).putString("path",tsPath)).putNumber("port",port).putString("host",host).putNumber("acceptBacklog",acceptBacklog).putBoolean("compressionSupported",compressionSupported).putNumber("maxWebsocketFrameSize",maxWebsocketFrameSize).putArray("websocketSubProtocols",new JsonArray().addString(wsSubProtocol));
  HttpServerOptions options=new HttpServerOptions(json);
  assertEquals(sendBufferSize,options.getSendBufferSize());
  assertEquals(receiverBufferSize,options.getReceiveBufferSize());
  assertEquals(reuseAddress,options.isReuseAddress());
  assertEquals(trafficClass,options.getTrafficClass());
  assertEquals(tcpKeepAlive,options.isTcpKeepAlive());
  assertEquals(tcpNoDelay,options.isTcpNoDelay());
  assertEquals(soLinger,options.getSoLinger());
  assertEquals(usePooledBuffers,options.isUsePooledBuffers());
  assertEquals(ssl,options.isSsl());
  assertNotSame(keyStoreOptions,options.getKeyStoreOptions());
  assertEquals(ksPassword,((JKSOptions)options.getKeyStoreOptions()).getPassword());
  assertEquals(ksPath,((JKSOptions)options.getKeyStoreOptions()).getPath());
  assertNotSame(trustStoreOptions,options.getTrustStoreOptions());
  assertEquals(tsPassword,((JKSOptions)options.getTrustStoreOptions()).getPassword());
  assertEquals(tsPath,((JKSOptions)options.getTrustStoreOptions()).getPath());
  assertEquals(1,options.getEnabledCipherSuites().size());
  assertTrue(options.getEnabledCipherSuites().contains(enabledCipher));
  assertEquals(1,options.getCrlPaths().size());
  assertEquals(crlPath,options.getCrlPaths().get(0));
  assertEquals(port,options.getPort());
  assertEquals(host,options.getHost());
  assertEquals(acceptBacklog,options.getAcceptBacklog());
  assertEquals(compressionSupported,options.isCompressionSupported());
  assertEquals(maxWebsocketFrameSize,options.getMaxWebsocketFrameSize());
  assertTrue(options.getWebsocketSubProtocols().contains(wsSubProtocol));
  json.putObject("keyStoreOptions",new JsonObject().putString("type","pkcs12").putString("password",ksPassword)).putObject("trustStoreOptions",new JsonObject().putString("type","pkcs12").putString("password",tsPassword));
  options=new HttpServerOptions(json);
  assertTrue(options.getTrustStoreOptions() instanceof PKCS12Options);
  assertTrue(options.getKeyStoreOptions() instanceof PKCS12Options);
  json.putObject("keyStoreOptions",new JsonObject().putString("type","keyCert")).putObject("trustStoreOptions",new JsonObject().putString("type","ca"));
  options=new HttpServerOptions(json);
  assertTrue(options.getTrustStoreOptions() instanceof CaOptions);
  assertTrue(options.getKeyStoreOptions() instanceof KeyCertOptions);
  json.putObject("keyStoreOptions",new JsonObject().putString("type","foo"));
  try {
    new ClientOptions(json);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  json.putObject("trustStoreOptions",new JsonObject().putString("type","foo"));
  try {
    new ClientOptions(json);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
}
