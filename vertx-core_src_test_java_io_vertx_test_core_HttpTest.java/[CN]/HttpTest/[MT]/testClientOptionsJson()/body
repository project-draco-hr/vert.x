{
  int sendBufferSize=TestUtils.randomPositiveInt();
  int receiverBufferSize=TestUtils.randomPortInt();
  Random rand=new Random();
  boolean reuseAddress=rand.nextBoolean();
  int trafficClass=TestUtils.randomByte() + 127;
  boolean tcpNoDelay=rand.nextBoolean();
  boolean tcpKeepAlive=rand.nextBoolean();
  int soLinger=TestUtils.randomPositiveInt();
  boolean usePooledBuffers=rand.nextBoolean();
  boolean ssl=rand.nextBoolean();
  JKSOptions keyStoreOptions=JKSOptions.options();
  String ksPassword=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPassword(ksPassword);
  String ksPath=TestUtils.randomAlphaString(100);
  keyStoreOptions.setPath(ksPath);
  JKSOptions trustStoreOptions=JKSOptions.options();
  String tsPassword=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPassword(tsPassword);
  String tsPath=TestUtils.randomAlphaString(100);
  trustStoreOptions.setPath(tsPath);
  String enabledCipher=TestUtils.randomAlphaString(100);
  int connectTimeout=TestUtils.randomPositiveInt();
  boolean trustAll=rand.nextBoolean();
  String crlPath=TestUtils.randomUnicodeString(100);
  boolean verifyHost=rand.nextBoolean();
  int maxPoolSize=TestUtils.randomPositiveInt();
  boolean keepAlive=rand.nextBoolean();
  boolean pipelining=rand.nextBoolean();
  boolean tryUseCompression=rand.nextBoolean();
  JsonObject json=new JsonObject();
  json.putNumber("sendBufferSize",sendBufferSize).putNumber("receiveBufferSize",receiverBufferSize).putBoolean("reuseAddress",reuseAddress).putNumber("trafficClass",trafficClass).putBoolean("tcpNoDelay",tcpNoDelay).putBoolean("tcpKeepAlive",tcpKeepAlive).putNumber("soLinger",soLinger).putBoolean("usePooledBuffers",usePooledBuffers).putBoolean("ssl",ssl).putArray("enabledCipherSuites",new JsonArray().addString(enabledCipher)).putNumber("connectTimeout",connectTimeout).putBoolean("trustAll",trustAll).putArray("crlPaths",new JsonArray().addString(crlPath)).putObject("keyStoreOptions",new JsonObject().putString("type","jks").putString("password",ksPassword).putString("path",ksPath)).putObject("trustStoreOptions",new JsonObject().putString("type","jks").putString("password",tsPassword).putString("path",tsPath)).putBoolean("verifyHost",verifyHost).putNumber("maxPoolSize",maxPoolSize).putBoolean("keepAlive",keepAlive).putBoolean("pipelining",pipelining).putBoolean("tryUseCompression",tryUseCompression);
  HttpClientOptions options=HttpClientOptions.optionsFromJson(json);
  assertEquals(sendBufferSize,options.getSendBufferSize());
  assertEquals(receiverBufferSize,options.getReceiveBufferSize());
  assertEquals(reuseAddress,options.isReuseAddress());
  assertEquals(trafficClass,options.getTrafficClass());
  assertEquals(tcpKeepAlive,options.isTcpKeepAlive());
  assertEquals(tcpNoDelay,options.isTcpNoDelay());
  assertEquals(soLinger,options.getSoLinger());
  assertEquals(usePooledBuffers,options.isUsePooledBuffers());
  assertEquals(ssl,options.isSsl());
  assertNotSame(keyStoreOptions,options.getKeyStoreOptions());
  assertEquals(ksPassword,((JKSOptions)options.getKeyStoreOptions()).getPassword());
  assertEquals(ksPath,((JKSOptions)options.getKeyStoreOptions()).getPath());
  assertNotSame(trustStoreOptions,options.getTrustStoreOptions());
  assertEquals(tsPassword,((JKSOptions)options.getTrustStoreOptions()).getPassword());
  assertEquals(tsPath,((JKSOptions)options.getTrustStoreOptions()).getPath());
  assertEquals(1,options.getEnabledCipherSuites().size());
  assertTrue(options.getEnabledCipherSuites().contains(enabledCipher));
  assertEquals(connectTimeout,options.getConnectTimeout());
  assertEquals(trustAll,options.isTrustAll());
  assertEquals(1,options.getCrlPaths().size());
  assertEquals(crlPath,options.getCrlPaths().get(0));
  assertEquals(verifyHost,options.isVerifyHost());
  assertEquals(maxPoolSize,options.getMaxPoolSize());
  assertEquals(keepAlive,options.isKeepAlive());
  assertEquals(pipelining,options.isPipelining());
  assertEquals(tryUseCompression,options.isTryUseCompression());
  json.putObject("keyStoreOptions",new JsonObject().putString("type","pkcs12").putString("password",ksPassword)).putObject("trustStoreOptions",new JsonObject().putString("type","pkcs12").putString("password",tsPassword));
  options=HttpClientOptions.optionsFromJson(json);
  assertTrue(options.getTrustStoreOptions() instanceof PKCS12Options);
  assertTrue(options.getKeyStoreOptions() instanceof PKCS12Options);
  json.putObject("keyStoreOptions",new JsonObject().putString("type","keyCert")).putObject("trustStoreOptions",new JsonObject().putString("type","ca"));
  options=HttpClientOptions.optionsFromJson(json);
  assertTrue(options.getTrustStoreOptions() instanceof CaOptions);
  assertTrue(options.getKeyStoreOptions() instanceof KeyCertOptions);
  json.putObject("keyStoreOptions",new JsonObject().putString("type","foo"));
  try {
    HttpClientOptions.optionsFromJson(json);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  json.putObject("trustStoreOptions",new JsonObject().putString("type","foo"));
  try {
    HttpClientOptions.optionsFromJson(json);
    fail("Should throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
}
